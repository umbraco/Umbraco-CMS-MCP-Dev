/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Umbraco Workflow Management API
 * Describes the Umbraco Workflow Management API.
 * OpenAPI spec version: Latest
 */
import {
  z as zod
} from 'zod';


export const postActionApproveBody = zod.object({
  "comment": zod.string(),
  "instanceGuid": zod.string().uuid(),
  "userId": zod.string().uuid().nullish(),
  "assignTo": zod.string().nullish()
})

export const postActionApproveResponse = zod.object({
  "workflowStatus": zod.array(zod.enum(['Null', 'Approved', 'Rejected', 'PendingApproval', 'NotRequired', 'Cancelled', 'Errored', 'Resubmitted', 'CancelledByThirdParty'])),
  "activeWorkflows": zod.array(zod.object({
  "actionedByAdmin": zod.boolean().nullish(),
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "actionedByUserId": zod.string().uuid().nullish(),
  "assignTo": zod.string().uuid().nullish(),
  "approvedByIds": zod.array(zod.string().uuid()),
  "instance": zod.object({
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "expireDate": zod.string().datetime({"local":true}).nullish(),
  "releaseDate": zod.string().datetime({"local":true}).nullish(),
  "key": zod.string().uuid(),
  "requestedByKey": zod.string().uuid(),
  "totalSteps": zod.number(),
  "requestedBy": zod.string().nullish(),
  "variantCode": zod.string().nullish(),
  "variantName": zod.string().nullish(),
  "attachment": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "status": zod.string().nullish(),
  "type": zod.string().nullish(),
  "segments": zod.string().nullish(),
  "scheduled": zod.boolean()
}).nullish(),
  "currentStep": zod.number(),
  "id": zod.number(),
  "typeId": zod.number(),
  "status": zod.number().nullish(),
  "node": zod.object({
  "key": zod.string().uuid(),
  "contentTypeKey": zod.string().uuid(),
  "name": zod.string().nullish(),
  "url": zod.string(),
  "exists": zod.boolean(),
  "new": zod.boolean(),
  "icon": zod.string()
}).nullish(),
  "backofficeUrl": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "statusName": zod.string().nullish(),
  "type": zod.string().nullish(),
  "typeDescription": zod.string().nullish(),
  "userGroup": zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
}).nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
}))
})


export const postActionCancelBody = zod.object({
  "comment": zod.string(),
  "instanceGuid": zod.string().uuid(),
  "userId": zod.string().uuid().nullish(),
  "assignTo": zod.string().nullish()
})

export const postActionCancelResponse = zod.object({
  "workflowStatus": zod.array(zod.enum(['Null', 'Approved', 'Rejected', 'PendingApproval', 'NotRequired', 'Cancelled', 'Errored', 'Resubmitted', 'CancelledByThirdParty'])),
  "activeWorkflows": zod.array(zod.object({
  "actionedByAdmin": zod.boolean().nullish(),
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "actionedByUserId": zod.string().uuid().nullish(),
  "assignTo": zod.string().uuid().nullish(),
  "approvedByIds": zod.array(zod.string().uuid()),
  "instance": zod.object({
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "expireDate": zod.string().datetime({"local":true}).nullish(),
  "releaseDate": zod.string().datetime({"local":true}).nullish(),
  "key": zod.string().uuid(),
  "requestedByKey": zod.string().uuid(),
  "totalSteps": zod.number(),
  "requestedBy": zod.string().nullish(),
  "variantCode": zod.string().nullish(),
  "variantName": zod.string().nullish(),
  "attachment": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "status": zod.string().nullish(),
  "type": zod.string().nullish(),
  "segments": zod.string().nullish(),
  "scheduled": zod.boolean()
}).nullish(),
  "currentStep": zod.number(),
  "id": zod.number(),
  "typeId": zod.number(),
  "status": zod.number().nullish(),
  "node": zod.object({
  "key": zod.string().uuid(),
  "contentTypeKey": zod.string().uuid(),
  "name": zod.string().nullish(),
  "url": zod.string(),
  "exists": zod.boolean(),
  "new": zod.boolean(),
  "icon": zod.string()
}).nullish(),
  "backofficeUrl": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "statusName": zod.string().nullish(),
  "type": zod.string().nullish(),
  "typeDescription": zod.string().nullish(),
  "userGroup": zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
}).nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
}))
})


export const postActionInitiateBody = zod.object({
  "entityId": zod.string().uuid(),
  "comment": zod.string(),
  "publish": zod.boolean(),
  "variant": zod.array(zod.string()),
  "releaseDate": zod.string().nullish(),
  "expireDate": zod.string().nullish(),
  "attachmentId": zod.number().nullish(),
  "userId": zod.string().uuid().nullish()
})

export const postActionInitiateResponse = zod.object({
  "workflowStatus": zod.array(zod.enum(['Null', 'Approved', 'Rejected', 'PendingApproval', 'NotRequired', 'Cancelled', 'Errored', 'Resubmitted', 'CancelledByThirdParty'])),
  "activeWorkflows": zod.array(zod.object({
  "actionedByAdmin": zod.boolean().nullish(),
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "actionedByUserId": zod.string().uuid().nullish(),
  "assignTo": zod.string().uuid().nullish(),
  "approvedByIds": zod.array(zod.string().uuid()),
  "instance": zod.object({
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "expireDate": zod.string().datetime({"local":true}).nullish(),
  "releaseDate": zod.string().datetime({"local":true}).nullish(),
  "key": zod.string().uuid(),
  "requestedByKey": zod.string().uuid(),
  "totalSteps": zod.number(),
  "requestedBy": zod.string().nullish(),
  "variantCode": zod.string().nullish(),
  "variantName": zod.string().nullish(),
  "attachment": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "status": zod.string().nullish(),
  "type": zod.string().nullish(),
  "segments": zod.string().nullish(),
  "scheduled": zod.boolean()
}).nullish(),
  "currentStep": zod.number(),
  "id": zod.number(),
  "typeId": zod.number(),
  "status": zod.number().nullish(),
  "node": zod.object({
  "key": zod.string().uuid(),
  "contentTypeKey": zod.string().uuid(),
  "name": zod.string().nullish(),
  "url": zod.string(),
  "exists": zod.boolean(),
  "new": zod.boolean(),
  "icon": zod.string()
}).nullish(),
  "backofficeUrl": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "statusName": zod.string().nullish(),
  "type": zod.string().nullish(),
  "typeDescription": zod.string().nullish(),
  "userGroup": zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
}).nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
}))
})


export const postActionRejectBody = zod.object({
  "comment": zod.string(),
  "instanceGuid": zod.string().uuid(),
  "userId": zod.string().uuid().nullish(),
  "assignTo": zod.string().nullish()
})

export const postActionRejectResponse = zod.object({
  "workflowStatus": zod.array(zod.enum(['Null', 'Approved', 'Rejected', 'PendingApproval', 'NotRequired', 'Cancelled', 'Errored', 'Resubmitted', 'CancelledByThirdParty'])),
  "activeWorkflows": zod.array(zod.object({
  "actionedByAdmin": zod.boolean().nullish(),
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "actionedByUserId": zod.string().uuid().nullish(),
  "assignTo": zod.string().uuid().nullish(),
  "approvedByIds": zod.array(zod.string().uuid()),
  "instance": zod.object({
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "expireDate": zod.string().datetime({"local":true}).nullish(),
  "releaseDate": zod.string().datetime({"local":true}).nullish(),
  "key": zod.string().uuid(),
  "requestedByKey": zod.string().uuid(),
  "totalSteps": zod.number(),
  "requestedBy": zod.string().nullish(),
  "variantCode": zod.string().nullish(),
  "variantName": zod.string().nullish(),
  "attachment": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "status": zod.string().nullish(),
  "type": zod.string().nullish(),
  "segments": zod.string().nullish(),
  "scheduled": zod.boolean()
}).nullish(),
  "currentStep": zod.number(),
  "id": zod.number(),
  "typeId": zod.number(),
  "status": zod.number().nullish(),
  "node": zod.object({
  "key": zod.string().uuid(),
  "contentTypeKey": zod.string().uuid(),
  "name": zod.string().nullish(),
  "url": zod.string(),
  "exists": zod.boolean(),
  "new": zod.boolean(),
  "icon": zod.string()
}).nullish(),
  "backofficeUrl": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "statusName": zod.string().nullish(),
  "type": zod.string().nullish(),
  "typeDescription": zod.string().nullish(),
  "userGroup": zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
}).nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
}))
})


export const postActionResubmitBody = zod.object({
  "comment": zod.string(),
  "instanceGuid": zod.string().uuid(),
  "userId": zod.string().uuid().nullish(),
  "assignTo": zod.string().nullish()
})

export const postActionResubmitResponse = zod.object({
  "workflowStatus": zod.array(zod.enum(['Null', 'Approved', 'Rejected', 'PendingApproval', 'NotRequired', 'Cancelled', 'Errored', 'Resubmitted', 'CancelledByThirdParty'])),
  "activeWorkflows": zod.array(zod.object({
  "actionedByAdmin": zod.boolean().nullish(),
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "actionedByUserId": zod.string().uuid().nullish(),
  "assignTo": zod.string().uuid().nullish(),
  "approvedByIds": zod.array(zod.string().uuid()),
  "instance": zod.object({
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "expireDate": zod.string().datetime({"local":true}).nullish(),
  "releaseDate": zod.string().datetime({"local":true}).nullish(),
  "key": zod.string().uuid(),
  "requestedByKey": zod.string().uuid(),
  "totalSteps": zod.number(),
  "requestedBy": zod.string().nullish(),
  "variantCode": zod.string().nullish(),
  "variantName": zod.string().nullish(),
  "attachment": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "status": zod.string().nullish(),
  "type": zod.string().nullish(),
  "segments": zod.string().nullish(),
  "scheduled": zod.boolean()
}).nullish(),
  "currentStep": zod.number(),
  "id": zod.number(),
  "typeId": zod.number(),
  "status": zod.number().nullish(),
  "node": zod.object({
  "key": zod.string().uuid(),
  "contentTypeKey": zod.string().uuid(),
  "name": zod.string().nullish(),
  "url": zod.string(),
  "exists": zod.boolean(),
  "new": zod.boolean(),
  "icon": zod.string()
}).nullish(),
  "backofficeUrl": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "statusName": zod.string().nullish(),
  "type": zod.string().nullish(),
  "typeDescription": zod.string().nullish(),
  "userGroup": zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
}).nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
}))
})


export const getAdvancedSearchContentTypesResponse = zod.object({
  "contentTypes": zod.array(zod.object({
  "name": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "id": zod.number(),
  "key": zod.string().uuid(),
  "varies": zod.boolean(),
  "icon": zod.string(),
  "properties": zod.array(zod.object({
  "name": zod.string(),
  "key": zod.string().uuid(),
  "selected": zod.boolean(),
  "dataTypeKey": zod.string().uuid(),
  "propertyEditorAlias": zod.string().nullish(),
  "propertyEditorUiAlias": zod.string().nullish(),
  "alias": zod.string(),
  "config": zod.record(zod.string(), zod.any()).nullish(),
  "value": zod.any().nullish(),
  "icon": zod.string()
})),
  "selected": zod.boolean()
})),
  "dataTypes": zod.array(zod.object({
  "key": zod.string().nullish(),
  "name": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "selected": zod.boolean()
})),
  "propertyEditors": zod.array(zod.object({
  "key": zod.string().nullish(),
  "name": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "selected": zod.boolean()
}))
})


export const postAdvancedSearchSearchBody = zod.object({
  "contentTypes": zod.array(zod.string()).nullish(),
  "cultures": zod.array(zod.string()).nullish(),
  "fields": zod.record(zod.string(), zod.any()),
  "baseFields": zod.record(zod.string(), zod.any()),
  "category": zod.string(),
  "searchType": zod.enum(['Null', 'All', 'Some', 'Single', 'Datatype', 'PropertyEditor']),
  "take": zod.number(),
  "skip": zod.number(),
  "fuzzy": zod.boolean()
})

export const postAdvancedSearchSearchResponse = zod.object({
  "results": zod.array(zod.object({
  "name": zod.string().nullish(),
  "documentTypeAlias": zod.string().nullish(),
  "id": zod.number().nullish(),
  "key": zod.string().uuid(),
  "published": zod.boolean(),
  "score": zod.number(),
  "icon": zod.string(),
  "culture": zod.array(zod.string()).nullish()
})),
  "totalPages": zod.number(),
  "totalItems": zod.number()
})


export const postApprovalGroupBody = zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
})


export const getApprovalGroupQuerySkipDefault = 0;export const getApprovalGroupQueryTakeDefault = 5;export const getApprovalGroupQueryFilterDefault = "";

export const getApprovalGroupQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getApprovalGroupQueryTakeDefault),
  "filter": zod.string().optional()
})

export const getApprovalGroupResponse = zod.object({
  "currentPage": zod.number(),
  "totalItems": zod.number(),
  "itemsPerPage": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string(),
  "unique": zod.string().uuid(),
  "icon": zod.string().nullish(),
  "groupEmail": zod.string().nullish(),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "members": zod.array(zod.object({
  "name": zod.string().nullish(),
  "inherited": zod.boolean(),
  "email": zod.string().nullish()
}))
}))
})


export const getApprovalGroupByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getApprovalGroupByIdResponse = zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
})


export const deleteApprovalGroupByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putApprovalGroupByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putApprovalGroupByIdBody = zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
})


export const getApprovalGroupInheritedMembersQueryParams = zod.object({
  "ids": zod.string().optional()
})

export const getApprovalGroupInheritedMembersResponseItem = zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
})
export const getApprovalGroupInheritedMembersResponse = zod.array(getApprovalGroupInheritedMembersResponseItem)


export const getApprovalGroupScaffoldResponse = zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
})


export const getItemApprovalGroupQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemApprovalGroupResponseItem = zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})
export const getItemApprovalGroupResponse = zod.array(getItemApprovalGroupResponseItem)


export const getChartContentReviewChartQueryParams = zod.object({
  "range": zod.coerce.number().optional()
})

export const getChartContentReviewChartResponse = zod.object({
  "series": zod.array(zod.object({
  "label": zod.string(),
  "key": zod.string(),
  "borderColor": zod.string(),
  "backgroundColor": zod.string(),
  "type": zod.string(),
  "data": zod.array(zod.object({
  "x": zod.string(),
  "y": zod.number()
}))
})),
  "additionalData": zod.record(zod.string(), zod.any()),
  "currentUserLocale": zod.string()
})


export const getChartWorkflowChartQueryParams = zod.object({
  "range": zod.coerce.number().optional(),
  "groupId": zod.string().uuid().optional()
})

export const getChartWorkflowChartResponse = zod.object({
  "series": zod.array(zod.object({
  "label": zod.string(),
  "key": zod.string(),
  "borderColor": zod.string(),
  "backgroundColor": zod.string(),
  "type": zod.string(),
  "data": zod.array(zod.object({
  "x": zod.string(),
  "y": zod.number()
}))
})),
  "additionalData": zod.record(zod.string(), zod.any()),
  "currentUserLocale": zod.string()
})


export const putConfigBody = zod.object({
  "key": zod.string().uuid().nullish(),
  "variant": zod.string().nullish(),
  "permissions": zod.array(zod.object({
  "permission": zod.number(),
  "name": zod.string().nullish(),
  "approvalThreshold": zod.number().nullish(),
  "icon": zod.string().nullish(),
  "groupUnique": zod.string().uuid()
}))
})

export const putConfigResponse = zod.object({
  "key": zod.string().uuid().nullish(),
  "variant": zod.string().nullish(),
  "permissions": zod.array(zod.object({
  "permission": zod.number(),
  "name": zod.string().nullish(),
  "approvalThreshold": zod.number().nullish(),
  "icon": zod.string().nullish(),
  "groupUnique": zod.string().uuid()
}))
})


export const postConfigUnlockBody = zod.object({
  "unique": zod.string().uuid(),
  "culture": zod.string().nullish(),
  "publish": zod.boolean()
})

export const postConfigUnlockResponse = zod.boolean()


export const getContentReviewConfigResponse = zod.object({
  "contentTypes": zod.array(zod.object({
  "name": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "id": zod.number(),
  "key": zod.string().uuid(),
  "varies": zod.boolean(),
  "icon": zod.string(),
  "properties": zod.array(zod.object({
  "name": zod.string(),
  "key": zod.string().uuid(),
  "selected": zod.boolean()
}))
})),
  "settings": zod.object({
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "contentItemReviews": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "documentTypeReviews": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "relativeTo": zod.number(),
  "force": zod.boolean()
})
})


export const putContentReviewConfigBody = zod.object({
  "config": zod.array(zod.object({
  "id": zod.number(),
  "documentKey": zod.string().uuid().nullish(),
  "name": zod.string(),
  "documentTypeKey": zod.string().uuid().nullish(),
  "excluded": zod.boolean(),
  "expired": zod.boolean(),
  "period": zod.number(),
  "variant": zod.string(),
  "variantName": zod.string(),
  "groups": zod.array(zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})).nullish(),
  "groupIds": zod.string(),
  "dueOn": zod.string().datetime({"local":true}).nullish(),
  "reviewedOn": zod.string().datetime({"local":true}).nullish(),
  "reviewedBy": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string()
}).nullish(),
  "inheritedFrom": zod.string().nullish(),
  "inheritedType": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "isDefaultVariant": zod.boolean(),
  "externalReviewers": zod.string().nullish()
})),
  "settings": zod.object({
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "contentItemReviews": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "documentTypeReviews": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "relativeTo": zod.number(),
  "force": zod.boolean()
}),
  "delete": zod.array(zod.number()),
  "regenerate": zod.boolean()
})

export const putContentReviewConfigResponse = zod.object({
  "contentTypes": zod.array(zod.object({
  "name": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "id": zod.number(),
  "key": zod.string().uuid(),
  "varies": zod.boolean(),
  "icon": zod.string(),
  "properties": zod.array(zod.object({
  "name": zod.string(),
  "key": zod.string().uuid(),
  "selected": zod.boolean()
}))
})),
  "settings": zod.object({
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "contentItemReviews": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "documentTypeReviews": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "relativeTo": zod.number(),
  "force": zod.boolean()
})
})


export const postContentReviewNodesBodyVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');
export const postContentReviewNodesBodyFiltersVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');


export const postContentReviewNodesBody = zod.object({
  "skip": zod.number().nullish(),
  "take": zod.number(),
  "variant": zod.string().regex(postContentReviewNodesBodyVariantRegExp).nullish(),
  "sortBy": zod.string(),
  "sortDirection": zod.string(),
  "filters": zod.object({
  "unique": zod.string().uuid().nullish(),
  "groupId": zod.string().uuid().nullish(),
  "authorUserId": zod.string().uuid().nullish(),
  "variant": zod.string().regex(postContentReviewNodesBodyFiltersVariantRegExp).nullish(),
  "type": zod.number().nullish(),
  "expired": zod.boolean().nullish(),
  "historyOnly": zod.boolean().nullish(),
  "status": zod.array(zod.number()).nullish(),
  "createdDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "completedDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "reviewedOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "dueOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish()
})
})

export const postContentReviewNodesResponse = zod.object({
  "currentPage": zod.number(),
  "totalItems": zod.number(),
  "itemsPerPage": zod.number(),
  "items": zod.array(zod.object({
  "dueOn": zod.string().datetime({"local":true}).nullish(),
  "lastReviewed": zod.string().datetime({"local":true}).nullish(),
  "reviewPeriod": zod.number(),
  "groups": zod.array(zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})),
  "document": zod.object({
  "name": zod.string().nullish(),
  "unique": zod.string().uuid(),
  "icon": zod.string().nullish(),
  "culture": zod.string()
}).nullish()
}))
})


export const putContentReviewReviewBody = zod.object({
  "document": zod.object({
  "name": zod.string().nullish(),
  "unique": zod.string().uuid(),
  "icon": zod.string().nullish(),
  "culture": zod.string()
}),
  "dueOn": zod.string().datetime({"local":true})
})


export const getContentContentSlimQueryParams = zod.object({
  "ids": zod.string().optional()
})

export const getContentContentSlimResponseItem = zod.object({
  "path": zod.string().nullish(),
  "nodeName": zod.string().nullish(),
  "nodeId": zod.number(),
  "contentTypeId": zod.number(),
  "contentTypeAlias": zod.string().nullish(),
  "icon": zod.string(),
  "trashed": zod.boolean(),
  "key": zod.string().uuid(),
  "contentTypeKey": zod.string().uuid()
})
export const getContentContentSlimResponse = zod.array(getContentContentSlimResponseItem)


export const getContentContentTypesResponseItem = zod.object({
  "name": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "id": zod.number(),
  "key": zod.string().uuid(),
  "varies": zod.boolean(),
  "icon": zod.string(),
  "properties": zod.array(zod.object({
  "name": zod.string(),
  "key": zod.string().uuid(),
  "selected": zod.boolean()
}))
})
export const getContentContentTypesResponse = zod.array(getContentContentTypesResponseItem)


export const getContentDiffQueryParams = zod.object({
  "guid": zod.string().uuid().optional()
})

export const getContentDiffResponse = zod.object({
  "currentVariants": zod.array(zod.object({
  "name": zod.string().nullish(),
  "language": zod.object({
  "name": zod.string(),
  "culture": zod.string(),
  "isDefault": zod.boolean()
}).nullish(),
  "properties": zod.array(zod.object({
  "label": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "value": zod.any().nullish(),
  "container": zod.object({
  "alias": zod.string(),
  "label": zod.string().nullable(),
  "type": zod.string().nullable()
}).nullish()
}))
})),
  "workflowVariants": zod.array(zod.object({
  "name": zod.string().nullish(),
  "language": zod.object({
  "name": zod.string(),
  "culture": zod.string(),
  "isDefault": zod.boolean()
}).nullish(),
  "properties": zod.array(zod.object({
  "label": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "value": zod.any().nullish(),
  "container": zod.object({
  "alias": zod.string(),
  "label": zod.string().nullable(),
  "type": zod.string().nullable()
}).nullish()
}))
}))
})


export const getEmailTemplateInstallResponseItem = zod.string()
export const getEmailTemplateInstallResponse = zod.array(getEmailTemplateInstallResponseItem)


export const getHistoryCleanupQueryParams = zod.object({
  "uniqueId": zod.string().uuid().optional(),
  "contentTypeId": zod.string().uuid().optional()
})

export const getHistoryCleanupResponse = zod.object({
  "enableCleanup": zod.boolean(),
  "keepHistoryForDays": zod.number(),
  "statusesToDelete": zod.record(zod.string(), zod.boolean()),
  "cleanupRules": zod.record(zod.string(), zod.object({
  "enableCleanup": zod.boolean(),
  "keepHistoryForDays": zod.number().nullish(),
  "statusesToDelete": zod.record(zod.string(), zod.boolean()),
  "isNodeConfig": zod.boolean(),
  "editable": zod.boolean(),
  "entityKey": zod.string(),
  "entityName": zod.string().nullish()
}))
})


export const putHistoryCleanupBody = zod.record(zod.string(), zod.object({
  "enableCleanup": zod.boolean(),
  "keepHistoryForDays": zod.number().nullish(),
  "statusesToDelete": zod.record(zod.string(), zod.boolean()),
  "isNodeConfig": zod.boolean(),
  "editable": zod.boolean(),
  "entityKey": zod.string(),
  "entityName": zod.string().nullish()
}))


export const getInstanceQueryParams = zod.object({
  "unique": zod.string().uuid().optional()
})

export const getInstanceResponse = zod.object({
  "node": zod.object({
  "key": zod.string().uuid(),
  "contentTypeKey": zod.string().uuid(),
  "name": zod.string().nullish(),
  "url": zod.string(),
  "exists": zod.boolean(),
  "new": zod.boolean(),
  "icon": zod.string()
}).nullish(),
  "instance": zod.object({
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "expireDate": zod.string().datetime({"local":true}).nullish(),
  "releaseDate": zod.string().datetime({"local":true}).nullish(),
  "key": zod.string().uuid(),
  "requestedByKey": zod.string().uuid(),
  "totalSteps": zod.number(),
  "requestedBy": zod.string().nullish(),
  "variantCode": zod.string().nullish(),
  "variantName": zod.string().nullish(),
  "attachment": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "status": zod.string().nullish(),
  "type": zod.string().nullish(),
  "segments": zod.string().nullish(),
  "scheduled": zod.boolean()
}).nullish(),
  "permissions": zod.array(zod.object({
  "permission": zod.number(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})
})),
  "tasks": zod.array(zod.object({
  "currentStep": zod.number(),
  "status": zod.string().nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}),
  "completedBy": zod.string()
}))
})


export const postInstanceActiveBodyVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');
export const postInstanceActiveBodyFiltersVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');


export const postInstanceActiveBody = zod.object({
  "skip": zod.number().nullish(),
  "take": zod.number(),
  "variant": zod.string().regex(postInstanceActiveBodyVariantRegExp).nullish(),
  "sortBy": zod.string(),
  "sortDirection": zod.string(),
  "filters": zod.object({
  "unique": zod.string().uuid().nullish(),
  "groupId": zod.string().uuid().nullish(),
  "authorUserId": zod.string().uuid().nullish(),
  "variant": zod.string().regex(postInstanceActiveBodyFiltersVariantRegExp).nullish(),
  "type": zod.number().nullish(),
  "expired": zod.boolean().nullish(),
  "historyOnly": zod.boolean().nullish(),
  "status": zod.array(zod.number()).nullish(),
  "createdDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "completedDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "reviewedOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "dueOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish()
})
})

export const postInstanceActiveResponse = zod.object({
  "currentPage": zod.number(),
  "totalItems": zod.number(),
  "itemsPerPage": zod.number(),
  "items": zod.array(zod.object({
  "unique": zod.string().uuid(),
  "status": zod.string().nullish(),
  "culture": zod.string().nullish(),
  "action": zod.string().nullish(),
  "requestedBy": zod.string().nullish(),
  "requestedOn": zod.string().datetime({"local":true}).nullish(),
  "comment": zod.string().nullish(),
  "scheduled": zod.boolean(),
  "tasks": zod.array(zod.object({
  "permission": zod.number(),
  "status": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
})),
  "document": zod.object({
  "name": zod.string().nullish(),
  "unique": zod.string().uuid(),
  "icon": zod.string().nullish(),
  "culture": zod.string()
}).nullish()
}))
})


export const postInstanceAllBodyVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');
export const postInstanceAllBodyFiltersVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');


export const postInstanceAllBody = zod.object({
  "skip": zod.number().nullish(),
  "take": zod.number(),
  "variant": zod.string().regex(postInstanceAllBodyVariantRegExp).nullish(),
  "sortBy": zod.string(),
  "sortDirection": zod.string(),
  "filters": zod.object({
  "unique": zod.string().uuid().nullish(),
  "groupId": zod.string().uuid().nullish(),
  "authorUserId": zod.string().uuid().nullish(),
  "variant": zod.string().regex(postInstanceAllBodyFiltersVariantRegExp).nullish(),
  "type": zod.number().nullish(),
  "expired": zod.boolean().nullish(),
  "historyOnly": zod.boolean().nullish(),
  "status": zod.array(zod.number()).nullish(),
  "createdDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "completedDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "reviewedOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "dueOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish()
})
})

export const postInstanceAllResponse = zod.object({
  "currentPage": zod.number(),
  "totalItems": zod.number(),
  "itemsPerPage": zod.number(),
  "items": zod.array(zod.object({
  "unique": zod.string().uuid(),
  "status": zod.string().nullish(),
  "culture": zod.string().nullish(),
  "action": zod.string().nullish(),
  "requestedBy": zod.string().nullish(),
  "requestedOn": zod.string().datetime({"local":true}).nullish(),
  "comment": zod.string().nullish(),
  "scheduled": zod.boolean(),
  "tasks": zod.array(zod.object({
  "permission": zod.number(),
  "status": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
})),
  "document": zod.object({
  "name": zod.string().nullish(),
  "unique": zod.string().uuid(),
  "icon": zod.string().nullish(),
  "culture": zod.string()
}).nullish()
}))
})


export const postInstanceAssignedToBodyVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');
export const postInstanceAssignedToBodyFiltersVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');


export const postInstanceAssignedToBody = zod.object({
  "skip": zod.number().nullish(),
  "take": zod.number(),
  "variant": zod.string().regex(postInstanceAssignedToBodyVariantRegExp).nullish(),
  "sortBy": zod.string(),
  "sortDirection": zod.string(),
  "filters": zod.object({
  "unique": zod.string().uuid().nullish(),
  "groupId": zod.string().uuid().nullish(),
  "authorUserId": zod.string().uuid().nullish(),
  "variant": zod.string().regex(postInstanceAssignedToBodyFiltersVariantRegExp).nullish(),
  "type": zod.number().nullish(),
  "expired": zod.boolean().nullish(),
  "historyOnly": zod.boolean().nullish(),
  "status": zod.array(zod.number()).nullish(),
  "createdDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "completedDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "reviewedOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "dueOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish()
})
})

export const postInstanceAssignedToResponse = zod.object({
  "currentPage": zod.number(),
  "totalItems": zod.number(),
  "itemsPerPage": zod.number(),
  "items": zod.array(zod.object({
  "unique": zod.string().uuid(),
  "status": zod.string().nullish(),
  "culture": zod.string().nullish(),
  "action": zod.string().nullish(),
  "requestedBy": zod.string().nullish(),
  "requestedOn": zod.string().datetime({"local":true}).nullish(),
  "comment": zod.string().nullish(),
  "scheduled": zod.boolean(),
  "tasks": zod.array(zod.object({
  "permission": zod.number(),
  "status": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
})),
  "document": zod.object({
  "name": zod.string().nullish(),
  "unique": zod.string().uuid(),
  "icon": zod.string().nullish(),
  "culture": zod.string()
}).nullish()
}))
})


export const postInstanceInitiatedByBodyVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');
export const postInstanceInitiatedByBodyFiltersVariantRegExp = new RegExp('^([\\w\\d-_]){2,6}$');


export const postInstanceInitiatedByBody = zod.object({
  "skip": zod.number().nullish(),
  "take": zod.number(),
  "variant": zod.string().regex(postInstanceInitiatedByBodyVariantRegExp).nullish(),
  "sortBy": zod.string(),
  "sortDirection": zod.string(),
  "filters": zod.object({
  "unique": zod.string().uuid().nullish(),
  "groupId": zod.string().uuid().nullish(),
  "authorUserId": zod.string().uuid().nullish(),
  "variant": zod.string().regex(postInstanceInitiatedByBodyFiltersVariantRegExp).nullish(),
  "type": zod.number().nullish(),
  "expired": zod.boolean().nullish(),
  "historyOnly": zod.boolean().nullish(),
  "status": zod.array(zod.number()).nullish(),
  "createdDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "completedDate": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "reviewedOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish(),
  "dueOn": zod.object({
  "from": zod.string().datetime({"local":true}).nullish(),
  "to": zod.string().datetime({"local":true}).nullish()
}).nullish()
})
})

export const postInstanceInitiatedByResponse = zod.object({
  "currentPage": zod.number(),
  "totalItems": zod.number(),
  "itemsPerPage": zod.number(),
  "items": zod.array(zod.object({
  "unique": zod.string().uuid(),
  "status": zod.string().nullish(),
  "culture": zod.string().nullish(),
  "action": zod.string().nullish(),
  "requestedBy": zod.string().nullish(),
  "requestedOn": zod.string().datetime({"local":true}).nullish(),
  "comment": zod.string().nullish(),
  "scheduled": zod.boolean(),
  "tasks": zod.array(zod.object({
  "permission": zod.number(),
  "status": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
})),
  "document": zod.object({
  "name": zod.string().nullish(),
  "unique": zod.string().uuid(),
  "icon": zod.string().nullish(),
  "culture": zod.string()
}).nullish()
}))
})


export const getInstanceStatusQueryParams = zod.object({
  "ids": zod.string().optional()
})

export const getInstanceStatusResponse = zod.record(zod.string(), zod.boolean())


export const getScaffoldQueryParams = zod.object({
  "NodeKey": zod.string().uuid().optional(),
  "ContentTypeKey": zod.string().uuid().optional(),
  "IsDashboard": zod.coerce.boolean().optional(),
  "Variant": zod.string().optional()
})

export const getScaffoldResponse = zod.object({
  "config": zod.object({
  "node": zod.array(zod.object({
  "permission": zod.number(),
  "name": zod.string().nullish(),
  "approvalThreshold": zod.number().nullish(),
  "icon": zod.string().nullish(),
  "groupUnique": zod.string().uuid()
})),
  "contentType": zod.array(zod.object({
  "permission": zod.number(),
  "name": zod.string().nullish(),
  "approvalThreshold": zod.number().nullish(),
  "icon": zod.string().nullish(),
  "groupUnique": zod.string().uuid()
})),
  "inherited": zod.array(zod.object({
  "permission": zod.number(),
  "name": zod.string().nullish(),
  "approvalThreshold": zod.number().nullish(),
  "icon": zod.string().nullish(),
  "groupUnique": zod.string().uuid()
})),
  "new": zod.array(zod.object({
  "permission": zod.number(),
  "name": zod.string().nullish(),
  "approvalThreshold": zod.number().nullish(),
  "icon": zod.string().nullish(),
  "groupUnique": zod.string().uuid()
})),
  "excluded": zod.boolean(),
  "inheritedFrom": zod.string().nullish(),
  "locked": zod.boolean()
}).nullish(),
  "review": zod.object({
  "dueOn": zod.string().datetime({"local":true}).nullish(),
  "inheritedFrom": zod.string().nullish(),
  "inheritedType": zod.string().nullish(),
  "expired": zod.boolean(),
  "currentUserShouldReview": zod.boolean(),
  "reviewPeriod": zod.number(),
  "groups": zod.array(zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}))
}).nullish(),
  "tasks": zod.object({
  "invariantTask": zod.object({
  "actionedByAdmin": zod.boolean().nullish(),
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "actionedByUserId": zod.string().uuid().nullish(),
  "assignTo": zod.string().uuid().nullish(),
  "approvedByIds": zod.array(zod.string().uuid()),
  "instance": zod.object({
  "completedOn": zod.string().datetime({"local":true}).nullish(),
  "requestedOn": zod.string().datetime({"local":true}),
  "expireDate": zod.string().datetime({"local":true}).nullish(),
  "releaseDate": zod.string().datetime({"local":true}).nullish(),
  "key": zod.string().uuid(),
  "requestedByKey": zod.string().uuid(),
  "totalSteps": zod.number(),
  "requestedBy": zod.string().nullish(),
  "variantCode": zod.string().nullish(),
  "variantName": zod.string().nullish(),
  "attachment": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "status": zod.string().nullish(),
  "type": zod.string().nullish(),
  "segments": zod.string().nullish(),
  "scheduled": zod.boolean()
}).nullish(),
  "currentStep": zod.number(),
  "id": zod.number(),
  "typeId": zod.number(),
  "status": zod.number().nullish(),
  "node": zod.object({
  "key": zod.string().uuid(),
  "contentTypeKey": zod.string().uuid(),
  "name": zod.string().nullish(),
  "url": zod.string(),
  "exists": zod.boolean(),
  "new": zod.boolean(),
  "icon": zod.string()
}).nullish(),
  "backofficeUrl": zod.string().nullish(),
  "comment": zod.string().nullish(),
  "completedBy": zod.string().nullish(),
  "statusName": zod.string().nullish(),
  "type": zod.string().nullish(),
  "typeDescription": zod.string().nullish(),
  "userGroup": zod.object({
  "entityType": zod.string(),
  "alias": zod.string(),
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "inheritMembers": zod.string(),
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "permissions": zod.array(zod.object({
  "unique": zod.string().uuid().nullish(),
  "permission": zod.number(),
  "culture": zod.string().nullish(),
  "icon": zod.string().nullish(),
  "name": zod.string().nullish(),
  "documentPermission": zod.boolean(),
  "newDocumentPermission": zod.boolean(),
  "groupUnique": zod.string().uuid()
})),
  "users": zod.array(zod.object({
  "userUnique": zod.string().uuid(),
  "groupUnique": zod.string().uuid(),
  "username": zod.string().nullish(),
  "name": zod.string().nullish(),
  "email": zod.string().nullish(),
  "inherited": zod.boolean(),
  "isActive": zod.boolean()
}))
}).nullish(),
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}).nullish()
}).nullish(),
  "variantTasks": zod.array(zod.string())
}).nullish(),
  "activeVariants": zod.array(zod.string())
})


export const getInformationResponse = zod.object({
  "globalVariables": zod.object({
  "culture": zod.object({
  "name": zod.string(),
  "culture": zod.string(),
  "isDefault": zod.boolean()
}),
  "user": zod.object({
  "culture": zod.string().nullable(),
  "isAdmin": zod.boolean(),
  "unique": zod.string().uuid().nullable()
}),
  "workflow": zod.object({
  "historyCleanupEnabled": zod.boolean(),
  "configureApprovalThreshold": zod.boolean(),
  "defaultApprovalThreshold": zod.number(),
  "mandatoryComments": zod.boolean(),
  "adminCanEdit": zod.boolean(),
  "allowAttachments": zod.boolean(),
  "allowScheduling": zod.boolean(),
  "extendPermissions": zod.boolean(),
  "lockIfActive": zod.boolean(),
  "requireUnpublish": zod.boolean(),
  "flowType": zod.number()
}),
  "availableLanguages": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string(),
  "isDefault": zod.boolean()
}))
}),
  "license": zod.object({
  "isTrial": zod.boolean(),
  "isImpersonating": zod.boolean(),
  "isLicensed": zod.boolean(),
  "maxGroups": zod.number()
}).nullable(),
  "hubUrl": zod.string()
})


export const getSettingsResponse = zod.object({
  "generalSettings": zod.object({
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "excludeNodes": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "newNodeApprovalFlow": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "documentTypeApprovalFlows": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
})
}),
  "notificationsSettings": zod.object({
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "emailTemplates": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
})
})
})


export const putSettingsBody = zod.object({
  "generalSettings": zod.object({
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "excludeNodes": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "newNodeApprovalFlow": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "documentTypeApprovalFlows": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
})
}),
  "notificationsSettings": zod.object({
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "emailTemplates": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
})
})
})

export const putSettingsResponse = zod.object({
  "generalSettings": zod.object({
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "excludeNodes": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "newNodeApprovalFlow": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
}),
  "documentTypeApprovalFlows": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
})
}),
  "notificationsSettings": zod.object({
  "properties": zod.array(zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish(),
  "alias": zod.string(),
  "label": zod.string(),
  "editorUiAlias": zod.string()
})),
  "emailTemplates": zod.object({
  "config": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "readonly": zod.boolean(),
  "hidden": zod.boolean(),
  "requiresLicense": zod.boolean(),
  "value": zod.any().nullish()
})
})
})


export const getSettingsVersionResponse = zod.object({
  "installedVersion": zod.string().nullish(),
  "latestVersion": zod.string().nullish(),
  "outOfDate": zod.boolean()
})


export const getTaskByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getTaskByIdResponse = zod.object({
  "taskCollection": zod.array(zod.object({
  "group": zod.object({
  "unique": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
}),
  "items": zod.array(zod.object({
  "actionedByName": zod.string().nullish(),
  "actionedById": zod.string().uuid().nullish(),
  "actionedByAdmin": zod.boolean(),
  "actionedOn": zod.string().datetime({"local":true}).nullish(),
  "comment": zod.string().nullish(),
  "status": zod.number().nullish(),
  "linked": zod.boolean(),
  "future": zod.boolean()
})),
  "status": zod.number().nullish(),
  "actionedByAdmin": zod.boolean(),
  "approvalCount": zod.number(),
  "approvalsRequired": zod.number(),
  "approvalsText": zod.string().nullish(),
  "approvalStep": zod.number(),
  "future": zod.boolean()
})),
  "totalSteps": zod.number(),
  "currentStep": zod.number()
})


export const getTaskActiveVariantsByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getTaskActiveVariantsByIdResponseItem = zod.string()
export const getTaskActiveVariantsByIdResponse = zod.array(getTaskActiveVariantsByIdResponseItem)


