/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Umbraco Management API
 * This shows all APIs available in this version of Umbraco - including all the legacy apis that are available for backward compatibility
 * OpenAPI spec version: Latest
 */
import {
  z as zod
} from 'zod';


export const getCultureQuerySkipDefault = 0;export const getCultureQueryTakeDefault = 100;

export const getCultureQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getCultureQueryTakeDefault)
})

export const getCultureResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string().min(1),
  "englishName": zod.string().min(1)
}))
})


export const postDataTypeBody = zod.object({
  "name": zod.string().min(1),
  "editorAlias": zod.string().min(1),
  "editorUiAlias": zod.string(),
  "values": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDataTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getDataTypeByIdResponse = zod.object({
  "name": zod.string().min(1),
  "editorAlias": zod.string().min(1),
  "editorUiAlias": zod.string(),
  "values": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
})),
  "id": zod.string().uuid(),
  "isDeletable": zod.boolean(),
  "canIgnoreStartNodes": zod.boolean()
})


export const deleteDataTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putDataTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putDataTypeByIdBody = zod.object({
  "name": zod.string().min(1),
  "editorAlias": zod.string().min(1),
  "editorUiAlias": zod.string(),
  "values": zod.array(zod.object({
  "alias": zod.string(),
  "value": zod.any().nullish()
}))
})


export const postDataTypeByIdCopyParams = zod.object({
  "id": zod.string().uuid()
})

export const postDataTypeByIdCopyBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDataTypeByIdIsUsedParams = zod.object({
  "id": zod.string().uuid()
})

export const getDataTypeByIdIsUsedResponse = zod.boolean()


export const putDataTypeByIdMoveParams = zod.object({
  "id": zod.string().uuid()
})

export const putDataTypeByIdMoveBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDataTypeByIdReferencesParams = zod.object({
  "id": zod.string().uuid()
})

export const getDataTypeByIdReferencesResponseItem = zod.object({
  "contentType": zod.object({
  "id": zod.string().uuid(),
  "type": zod.string().nullable(),
  "name": zod.string().nullable(),
  "icon": zod.string().nullable()
}),
  "properties": zod.array(zod.object({
  "name": zod.string(),
  "alias": zod.string()
}))
})
export const getDataTypeByIdReferencesResponse = zod.array(getDataTypeByIdReferencesResponseItem)


export const getDataTypeConfigurationResponse = zod.object({
  "canBeChanged": zod.enum(['True', 'False', 'FalseWithHelpText']),
  "documentListViewId": zod.string().uuid(),
  "mediaListViewId": zod.string().uuid()
})


export const postDataTypeFolderBody = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDataTypeFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getDataTypeFolderByIdResponse = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().uuid()
})


export const deleteDataTypeFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putDataTypeFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putDataTypeFolderByIdBody = zod.object({
  "name": zod.string().min(1)
})


export const getFilterDataTypeQuerySkipDefault = 0;export const getFilterDataTypeQueryTakeDefault = 100;export const getFilterDataTypeQueryNameDefault = "";

export const getFilterDataTypeQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getFilterDataTypeQueryTakeDefault),
  "name": zod.string().optional(),
  "editorUiAlias": zod.string().optional(),
  "editorAlias": zod.string().optional()
})

export const getFilterDataTypeResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "editorUiAlias": zod.string().nullish(),
  "editorAlias": zod.string(),
  "isDeletable": zod.boolean()
}))
})


export const getItemDataTypeQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemDataTypeResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "editorUiAlias": zod.string().nullish(),
  "editorAlias": zod.string(),
  "isDeletable": zod.boolean()
})
export const getItemDataTypeResponse = zod.array(getItemDataTypeResponseItem)


export const getItemDataTypeSearchQuerySkipDefault = 0;export const getItemDataTypeSearchQueryTakeDefault = 100;

export const getItemDataTypeSearchQueryParams = zod.object({
  "query": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemDataTypeSearchQueryTakeDefault)
})

export const getItemDataTypeSearchResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "editorUiAlias": zod.string().nullish(),
  "editorAlias": zod.string(),
  "isDeletable": zod.boolean()
})),
  "total": zod.number()
})


export const getTreeDataTypeAncestorsQueryParams = zod.object({
  "descendantId": zod.string().uuid().optional()
})

export const getTreeDataTypeAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "editorUiAlias": zod.string().nullish(),
  "isDeletable": zod.boolean()
})
export const getTreeDataTypeAncestorsResponse = zod.array(getTreeDataTypeAncestorsResponseItem)


export const getTreeDataTypeChildrenQuerySkipDefault = 0;export const getTreeDataTypeChildrenQueryTakeDefault = 100;export const getTreeDataTypeChildrenQueryFoldersOnlyDefault = false;

export const getTreeDataTypeChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDataTypeChildrenQueryTakeDefault),
  "foldersOnly": zod.coerce.boolean().optional()
})

export const getTreeDataTypeChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "editorUiAlias": zod.string().nullish(),
  "isDeletable": zod.boolean()
}))
})


export const getTreeDataTypeRootQuerySkipDefault = 0;export const getTreeDataTypeRootQueryTakeDefault = 100;export const getTreeDataTypeRootQueryFoldersOnlyDefault = false;

export const getTreeDataTypeRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDataTypeRootQueryTakeDefault),
  "foldersOnly": zod.coerce.boolean().optional()
})

export const getTreeDataTypeRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "editorUiAlias": zod.string().nullish(),
  "isDeletable": zod.boolean()
}))
})


export const getDictionaryQuerySkipDefault = 0;export const getDictionaryQueryTakeDefault = 100;

export const getDictionaryQueryParams = zod.object({
  "filter": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getDictionaryQueryTakeDefault)
})

export const getDictionaryResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string().nullish(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "translatedIsoCodes": zod.array(zod.string())
}))
})


export const postDictionaryBody = zod.object({
  "name": zod.string().min(1),
  "translations": zod.array(zod.object({
  "isoCode": zod.string().min(1),
  "translation": zod.string().min(1)
})),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDictionaryByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getDictionaryByIdResponse = zod.object({
  "name": zod.string().min(1),
  "translations": zod.array(zod.object({
  "isoCode": zod.string().min(1),
  "translation": zod.string().min(1)
})),
  "id": zod.string().uuid()
})


export const deleteDictionaryByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putDictionaryByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putDictionaryByIdBody = zod.object({
  "name": zod.string().min(1),
  "translations": zod.array(zod.object({
  "isoCode": zod.string().min(1),
  "translation": zod.string().min(1)
}))
})


export const getDictionaryByIdExportParams = zod.object({
  "id": zod.string().uuid()
})

export const getDictionaryByIdExportQueryIncludeChildrenDefault = false;

export const getDictionaryByIdExportQueryParams = zod.object({
  "includeChildren": zod.coerce.boolean().optional()
})

export const getDictionaryByIdExportResponse = zod.instanceof(File)


export const putDictionaryByIdMoveParams = zod.object({
  "id": zod.string().uuid()
})

export const putDictionaryByIdMoveBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const postDictionaryImportBody = zod.object({
  "temporaryFile": zod.object({
  "id": zod.string().uuid()
}),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getItemDictionaryQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemDictionaryResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string()
})
export const getItemDictionaryResponse = zod.array(getItemDictionaryResponseItem)


export const getTreeDictionaryAncestorsQueryParams = zod.object({
  "descendantId": zod.string().uuid().optional()
})

export const getTreeDictionaryAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string()
})
export const getTreeDictionaryAncestorsResponse = zod.array(getTreeDictionaryAncestorsResponseItem)


export const getTreeDictionaryChildrenQuerySkipDefault = 0;export const getTreeDictionaryChildrenQueryTakeDefault = 100;

export const getTreeDictionaryChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDictionaryChildrenQueryTakeDefault)
})

export const getTreeDictionaryChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string()
}))
})


export const getTreeDictionaryRootQuerySkipDefault = 0;export const getTreeDictionaryRootQueryTakeDefault = 100;

export const getTreeDictionaryRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDictionaryRootQueryTakeDefault)
})

export const getTreeDictionaryRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string()
}))
})


export const postDocumentBlueprintBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentType": zod.object({
  "id": zod.string().uuid()
})
})


export const getDocumentBlueprintByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentBlueprintByIdResponse = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish(),
  "editorAlias": zod.string().min(1)
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true}),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),
  "publishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledPublishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledUnpublishDate": zod.string().datetime({"local":true}).nullish()
})),
  "id": zod.string().uuid(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
})
})


export const deleteDocumentBlueprintByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putDocumentBlueprintByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentBlueprintByIdBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
}))
})


export const putDocumentBlueprintByIdMoveParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentBlueprintByIdMoveBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const postDocumentBlueprintFolderBody = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDocumentBlueprintFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentBlueprintFolderByIdResponse = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().uuid()
})


export const deleteDocumentBlueprintFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putDocumentBlueprintFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentBlueprintFolderByIdBody = zod.object({
  "name": zod.string().min(1)
})


export const postDocumentBlueprintFromDocumentBody = zod.object({
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "id": zod.string().uuid().nullish(),
  "name": zod.string(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getItemDocumentBlueprintQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemDocumentBlueprintResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
})
})
export const getItemDocumentBlueprintResponse = zod.array(getItemDocumentBlueprintResponseItem)


export const getTreeDocumentBlueprintAncestorsQueryParams = zod.object({
  "descendantId": zod.string().uuid().optional()
})

export const getTreeDocumentBlueprintAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}).nullish()
})
export const getTreeDocumentBlueprintAncestorsResponse = zod.array(getTreeDocumentBlueprintAncestorsResponseItem)


export const getTreeDocumentBlueprintChildrenQuerySkipDefault = 0;export const getTreeDocumentBlueprintChildrenQueryTakeDefault = 100;export const getTreeDocumentBlueprintChildrenQueryFoldersOnlyDefault = false;

export const getTreeDocumentBlueprintChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDocumentBlueprintChildrenQueryTakeDefault),
  "foldersOnly": zod.coerce.boolean().optional()
})

export const getTreeDocumentBlueprintChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}).nullish()
}))
})


export const getTreeDocumentBlueprintRootQuerySkipDefault = 0;export const getTreeDocumentBlueprintRootQueryTakeDefault = 100;export const getTreeDocumentBlueprintRootQueryFoldersOnlyDefault = false;

export const getTreeDocumentBlueprintRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDocumentBlueprintRootQueryTakeDefault),
  "foldersOnly": zod.coerce.boolean().optional()
})

export const getTreeDocumentBlueprintRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}).nullish()
}))
})


export const postDocumentTypeBody = zod.object({
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "icon": zod.string().min(1),
  "allowedAsRoot": zod.boolean(),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isElement": zod.boolean(),
  "properties": zod.array(zod.object({
  "id": zod.string().uuid(),
  "container": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sortOrder": zod.number(),
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "dataType": zod.object({
  "id": zod.string().uuid()
}),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "validation": zod.object({
  "mandatory": zod.boolean(),
  "mandatoryMessage": zod.string().nullish(),
  "regEx": zod.string().nullish(),
  "regExMessage": zod.string().nullish()
}),
  "appearance": zod.object({
  "labelOnTop": zod.boolean()
})
})),
  "containers": zod.array(zod.object({
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string().nullish(),
  "type": zod.string().min(1),
  "sortOrder": zod.number()
})),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "allowedTemplates": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "defaultTemplate": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "cleanup": zod.object({
  "preventCleanup": zod.boolean(),
  "keepAllVersionsNewerThanDays": zod.number().nullish(),
  "keepLatestVersionPerDayForDays": zod.number().nullish()
}),
  "allowedDocumentTypes": zod.array(zod.object({
  "documentType": zod.object({
  "id": zod.string().uuid()
}),
  "sortOrder": zod.number()
})),
  "compositions": zod.array(zod.object({
  "documentType": zod.object({
  "id": zod.string().uuid()
}),
  "compositionType": zod.enum(['Composition', 'Inheritance'])
}))
})


export const getDocumentTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentTypeByIdResponse = zod.object({
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "icon": zod.string().min(1),
  "allowedAsRoot": zod.boolean(),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isElement": zod.boolean(),
  "properties": zod.array(zod.object({
  "id": zod.string().uuid(),
  "container": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sortOrder": zod.number(),
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "dataType": zod.object({
  "id": zod.string().uuid()
}),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "validation": zod.object({
  "mandatory": zod.boolean(),
  "mandatoryMessage": zod.string().nullish(),
  "regEx": zod.string().nullish(),
  "regExMessage": zod.string().nullish()
}),
  "appearance": zod.object({
  "labelOnTop": zod.boolean()
})
})),
  "containers": zod.array(zod.object({
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string().nullish(),
  "type": zod.string().min(1),
  "sortOrder": zod.number()
})),
  "id": zod.string().uuid(),
  "allowedTemplates": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "defaultTemplate": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "cleanup": zod.object({
  "preventCleanup": zod.boolean(),
  "keepAllVersionsNewerThanDays": zod.number().nullish(),
  "keepLatestVersionPerDayForDays": zod.number().nullish()
}),
  "allowedDocumentTypes": zod.array(zod.object({
  "documentType": zod.object({
  "id": zod.string().uuid()
}),
  "sortOrder": zod.number()
})),
  "compositions": zod.array(zod.object({
  "documentType": zod.object({
  "id": zod.string().uuid()
}),
  "compositionType": zod.enum(['Composition', 'Inheritance'])
}))
})


export const deleteDocumentTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putDocumentTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentTypeByIdBody = zod.object({
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "icon": zod.string().min(1),
  "allowedAsRoot": zod.boolean(),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isElement": zod.boolean(),
  "properties": zod.array(zod.object({
  "id": zod.string().uuid(),
  "container": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sortOrder": zod.number(),
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "dataType": zod.object({
  "id": zod.string().uuid()
}),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "validation": zod.object({
  "mandatory": zod.boolean(),
  "mandatoryMessage": zod.string().nullish(),
  "regEx": zod.string().nullish(),
  "regExMessage": zod.string().nullish()
}),
  "appearance": zod.object({
  "labelOnTop": zod.boolean()
})
})),
  "containers": zod.array(zod.object({
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string().nullish(),
  "type": zod.string().min(1),
  "sortOrder": zod.number()
})),
  "allowedTemplates": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "defaultTemplate": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "cleanup": zod.object({
  "preventCleanup": zod.boolean(),
  "keepAllVersionsNewerThanDays": zod.number().nullish(),
  "keepLatestVersionPerDayForDays": zod.number().nullish()
}),
  "allowedDocumentTypes": zod.array(zod.object({
  "documentType": zod.object({
  "id": zod.string().uuid()
}),
  "sortOrder": zod.number()
})),
  "compositions": zod.array(zod.object({
  "documentType": zod.object({
  "id": zod.string().uuid()
}),
  "compositionType": zod.enum(['Composition', 'Inheritance'])
}))
})


export const getDocumentTypeByIdAllowedChildrenParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentTypeByIdAllowedChildrenQuerySkipDefault = 0;export const getDocumentTypeByIdAllowedChildrenQueryTakeDefault = 100;

export const getDocumentTypeByIdAllowedChildrenQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getDocumentTypeByIdAllowedChildrenQueryTakeDefault)
})

export const getDocumentTypeByIdAllowedChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "description": zod.string().nullish(),
  "icon": zod.string().nullish()
}))
})


export const getDocumentTypeByIdBlueprintParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentTypeByIdBlueprintQuerySkipDefault = 0;export const getDocumentTypeByIdBlueprintQueryTakeDefault = 100;

export const getDocumentTypeByIdBlueprintQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getDocumentTypeByIdBlueprintQueryTakeDefault)
})

export const getDocumentTypeByIdBlueprintResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string()
}))
})


export const getDocumentTypeByIdCompositionReferencesParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentTypeByIdCompositionReferencesResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string()
})
export const getDocumentTypeByIdCompositionReferencesResponse = zod.array(getDocumentTypeByIdCompositionReferencesResponseItem)


export const postDocumentTypeByIdCopyParams = zod.object({
  "id": zod.string().uuid()
})

export const postDocumentTypeByIdCopyBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDocumentTypeByIdExportParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentTypeByIdExportResponse = zod.instanceof(File)


export const putDocumentTypeByIdImportParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentTypeByIdImportBody = zod.object({
  "file": zod.object({
  "id": zod.string().uuid()
})
})


export const putDocumentTypeByIdMoveParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentTypeByIdMoveBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDocumentTypeAllowedAtRootQuerySkipDefault = 0;export const getDocumentTypeAllowedAtRootQueryTakeDefault = 100;

export const getDocumentTypeAllowedAtRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getDocumentTypeAllowedAtRootQueryTakeDefault)
})

export const getDocumentTypeAllowedAtRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "description": zod.string().nullish(),
  "icon": zod.string().nullish()
}))
})


export const postDocumentTypeAvailableCompositionsBody = zod.object({
  "id": zod.string().uuid().nullish(),
  "currentPropertyAliases": zod.array(zod.string()),
  "currentCompositeIds": zod.array(zod.string().uuid()),
  "isElement": zod.boolean()
})

export const postDocumentTypeAvailableCompositionsResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string(),
  "folderPath": zod.array(zod.string()),
  "isCompatible": zod.boolean()
})
export const postDocumentTypeAvailableCompositionsResponse = zod.array(postDocumentTypeAvailableCompositionsResponseItem)


export const getDocumentTypeConfigurationResponse = zod.object({
  "dataTypesCanBeChanged": zod.enum(['True', 'False', 'FalseWithHelpText']),
  "disableTemplates": zod.boolean(),
  "useSegments": zod.boolean(),
  "reservedFieldNames": zod.array(zod.string())
})


export const postDocumentTypeFolderBody = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDocumentTypeFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentTypeFolderByIdResponse = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().uuid()
})


export const deleteDocumentTypeFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putDocumentTypeFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentTypeFolderByIdBody = zod.object({
  "name": zod.string().min(1)
})


export const postDocumentTypeImportBody = zod.object({
  "file": zod.object({
  "id": zod.string().uuid()
})
})


export const getItemDocumentTypeQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemDocumentTypeResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "isElement": zod.boolean(),
  "icon": zod.string().nullish(),
  "description": zod.string().nullish()
})
export const getItemDocumentTypeResponse = zod.array(getItemDocumentTypeResponseItem)


export const getItemDocumentTypeSearchQuerySkipDefault = 0;export const getItemDocumentTypeSearchQueryTakeDefault = 100;

export const getItemDocumentTypeSearchQueryParams = zod.object({
  "query": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemDocumentTypeSearchQueryTakeDefault)
})

export const getItemDocumentTypeSearchResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "isElement": zod.boolean(),
  "icon": zod.string().nullish(),
  "description": zod.string().nullish()
})),
  "total": zod.number()
})


export const getTreeDocumentTypeAncestorsQueryParams = zod.object({
  "descendantId": zod.string().uuid().optional()
})

export const getTreeDocumentTypeAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "isElement": zod.boolean(),
  "icon": zod.string()
})
export const getTreeDocumentTypeAncestorsResponse = zod.array(getTreeDocumentTypeAncestorsResponseItem)


export const getTreeDocumentTypeChildrenQuerySkipDefault = 0;export const getTreeDocumentTypeChildrenQueryTakeDefault = 100;export const getTreeDocumentTypeChildrenQueryFoldersOnlyDefault = false;

export const getTreeDocumentTypeChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDocumentTypeChildrenQueryTakeDefault),
  "foldersOnly": zod.coerce.boolean().optional()
})

export const getTreeDocumentTypeChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "isElement": zod.boolean(),
  "icon": zod.string()
}))
})


export const getTreeDocumentTypeRootQuerySkipDefault = 0;export const getTreeDocumentTypeRootQueryTakeDefault = 100;export const getTreeDocumentTypeRootQueryFoldersOnlyDefault = false;

export const getTreeDocumentTypeRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDocumentTypeRootQueryTakeDefault),
  "foldersOnly": zod.coerce.boolean().optional()
})

export const getTreeDocumentTypeRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "isElement": zod.boolean(),
  "icon": zod.string()
}))
})


export const getDocumentVersionQuerySkipDefault = 0;export const getDocumentVersionQueryTakeDefault = 100;

export const getDocumentVersionQueryParams = zod.object({
  "documentId": zod.string().uuid(),
  "culture": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getDocumentVersionQueryTakeDefault)
})

export const getDocumentVersionResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "documentType": zod.object({
  "id": zod.string().uuid()
}),
  "user": zod.object({
  "id": zod.string().uuid()
}),
  "versionDate": zod.string().datetime({"local":true}),
  "isCurrentPublishedVersion": zod.boolean(),
  "isCurrentDraftVersion": zod.boolean(),
  "preventCleanup": zod.boolean()
}))
})


export const getDocumentVersionByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentVersionByIdResponse = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish(),
  "editorAlias": zod.string().min(1)
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true}),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),
  "publishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledPublishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledUnpublishDate": zod.string().datetime({"local":true}).nullish()
})),
  "id": zod.string().uuid(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "document": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const putDocumentVersionByIdPreventCleanupParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentVersionByIdPreventCleanupQueryParams = zod.object({
  "preventCleanup": zod.coerce.boolean().optional()
})


export const postDocumentVersionByIdRollbackParams = zod.object({
  "id": zod.string().uuid()
})

export const postDocumentVersionByIdRollbackQueryParams = zod.object({
  "culture": zod.string().optional()
})


export const getCollectionDocumentByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getCollectionDocumentByIdQueryOrderByDefault = "updateDate";export const getCollectionDocumentByIdQuerySkipDefault = 0;export const getCollectionDocumentByIdQueryTakeDefault = 100;

export const getCollectionDocumentByIdQueryParams = zod.object({
  "dataTypeId": zod.string().uuid().optional(),
  "orderBy": zod.string().default(getCollectionDocumentByIdQueryOrderByDefault),
  "orderCulture": zod.string().optional(),
  "orderDirection": zod.enum(['Ascending', 'Descending']).optional(),
  "filter": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getCollectionDocumentByIdQueryTakeDefault)
})

export const getCollectionDocumentByIdResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish(),
  "editorAlias": zod.string().min(1)
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true}),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),
  "publishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledPublishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledUnpublishDate": zod.string().datetime({"local":true}).nullish()
})),
  "id": zod.string().uuid(),
  "creator": zod.string().nullish(),
  "sortOrder": zod.number(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "alias": zod.string(),
  "icon": zod.string()
}),
  "isTrashed": zod.boolean(),
  "isProtected": zod.boolean(),
  "updater": zod.string().nullish()
}))
})


export const postDocumentBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentType": zod.object({
  "id": zod.string().uuid()
}),
  "template": zod.object({
  "id": zod.string().uuid()
}).nullable()
})


export const getDocumentByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentByIdResponse = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish(),
  "editorAlias": zod.string().min(1)
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true}),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),
  "publishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledPublishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledUnpublishDate": zod.string().datetime({"local":true}).nullish()
})),
  "id": zod.string().uuid(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "urls": zod.array(zod.object({
  "culture": zod.string().nullable(),
  "url": zod.string()
})),
  "template": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isTrashed": zod.boolean()
})


export const deleteDocumentByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putDocumentByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentByIdBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "template": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getDocumentByIdAuditLogParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentByIdAuditLogQuerySkipDefault = 0;export const getDocumentByIdAuditLogQueryTakeDefault = 100;

export const getDocumentByIdAuditLogQueryParams = zod.object({
  "orderDirection": zod.enum(['Ascending', 'Descending']).optional(),
  "sinceDate": zod.string().datetime({"local":true}).optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getDocumentByIdAuditLogQueryTakeDefault)
})

export const getDocumentByIdAuditLogResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "user": zod.object({
  "id": zod.string().uuid()
}),
  "timestamp": zod.string().datetime({"local":true}),
  "logType": zod.enum(['New', 'Save', 'SaveVariant', 'Open', 'Delete', 'Publish', 'PublishVariant', 'SendToPublish', 'SendToPublishVariant', 'Unpublish', 'UnpublishVariant', 'Move', 'Copy', 'AssignDomain', 'PublicAccess', 'Sort', 'Notify', 'System', 'RollBack', 'PackagerInstall', 'PackagerUninstall', 'Custom', 'ContentVersionPreventCleanup', 'ContentVersionEnableCleanup']),
  "comment": zod.string().nullish(),
  "parameters": zod.string().nullish()
}))
})


export const postDocumentByIdCopyParams = zod.object({
  "id": zod.string().uuid()
})

export const postDocumentByIdCopyBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "relateToOriginal": zod.boolean(),
  "includeDescendants": zod.boolean()
})


export const getDocumentByIdDomainsParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentByIdDomainsResponse = zod.object({
  "defaultIsoCode": zod.string().nullish(),
  "domains": zod.array(zod.object({
  "domainName": zod.string(),
  "isoCode": zod.string()
}))
})


export const putDocumentByIdDomainsParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentByIdDomainsBody = zod.object({
  "defaultIsoCode": zod.string().nullish(),
  "domains": zod.array(zod.object({
  "domainName": zod.string(),
  "isoCode": zod.string()
}))
})


export const putDocumentByIdMoveParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentByIdMoveBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const putDocumentByIdMoveToRecycleBinParams = zod.object({
  "id": zod.string().uuid()
})


export const getDocumentByIdNotificationsParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentByIdNotificationsResponseItem = zod.object({
  "actionId": zod.string(),
  "alias": zod.string(),
  "subscribed": zod.boolean()
})
export const getDocumentByIdNotificationsResponse = zod.array(getDocumentByIdNotificationsResponseItem)


export const putDocumentByIdNotificationsParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentByIdNotificationsBody = zod.object({
  "subscribedActionIds": zod.array(zod.string())
})


export const postDocumentByIdPublicAccessParams = zod.object({
  "id": zod.string().uuid()
})

export const postDocumentByIdPublicAccessBody = zod.object({
  "loginDocument": zod.object({
  "id": zod.string().uuid()
}),
  "errorDocument": zod.object({
  "id": zod.string().uuid()
}),
  "memberUserNames": zod.array(zod.string()),
  "memberGroupNames": zod.array(zod.string())
})


export const deleteDocumentByIdPublicAccessParams = zod.object({
  "id": zod.string().uuid()
})


export const getDocumentByIdPublicAccessParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentByIdPublicAccessResponse = zod.object({
  "loginDocument": zod.object({
  "id": zod.string().uuid()
}),
  "errorDocument": zod.object({
  "id": zod.string().uuid()
}),
  "members": zod.array(zod.object({
  "id": zod.string().uuid(),
  "memberType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
})),
  "kind": zod.enum(['Default', 'Api'])
})),
  "groups": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string()
}))
})


export const putDocumentByIdPublicAccessParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentByIdPublicAccessBody = zod.object({
  "loginDocument": zod.object({
  "id": zod.string().uuid()
}),
  "errorDocument": zod.object({
  "id": zod.string().uuid()
}),
  "memberUserNames": zod.array(zod.string()),
  "memberGroupNames": zod.array(zod.string())
})


export const putDocumentByIdPublishParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentByIdPublishBody = zod.object({
  "publishSchedules": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "schedule": zod.object({
  "publishTime": zod.string().datetime({"local":true}).nullish(),
  "unpublishTime": zod.string().datetime({"local":true}).nullish()
}).nullish()
}))
})


export const putDocumentByIdPublishWithDescendantsParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentByIdPublishWithDescendantsBody = zod.object({
  "includeUnpublishedDescendants": zod.boolean(),
  "cultures": zod.array(zod.string())
})


export const getDocumentByIdPublishedParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentByIdPublishedResponse = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish(),
  "editorAlias": zod.string().min(1)
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true}),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges']),
  "publishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledPublishDate": zod.string().datetime({"local":true}).nullish(),
  "scheduledUnpublishDate": zod.string().datetime({"local":true}).nullish()
})),
  "id": zod.string().uuid(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "urls": zod.array(zod.object({
  "culture": zod.string().nullable(),
  "url": zod.string()
})),
  "template": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isTrashed": zod.boolean()
})


export const getDocumentByIdReferencedByParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentByIdReferencedByQuerySkipDefault = 0;export const getDocumentByIdReferencedByQueryTakeDefault = 20;

export const getDocumentByIdReferencedByQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getDocumentByIdReferencedByQueryTakeDefault)
})

export const getDocumentByIdReferencedByResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "$type": zod.enum(['DefaultReferenceResponseModel']),
  "id": zod.string().uuid(),
  "name": zod.string().nullish(),
  "type": zod.string().nullish(),
  "icon": zod.string().nullish()
}).or(zod.object({
  "$type": zod.enum(['DocumentReferenceResponseModel']),
  "id": zod.string().uuid(),
  "name": zod.string().nullish(),
  "published": zod.boolean().nullish(),
  "documentType": zod.object({
  "icon": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "name": zod.string().nullish()
})
})).or(zod.object({
  "$type": zod.enum(['MediaReferenceResponseModel']),
  "id": zod.string().uuid(),
  "name": zod.string().nullish(),
  "mediaType": zod.object({
  "icon": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "name": zod.string().nullish()
})
})))
})


export const getDocumentByIdReferencedDescendantsParams = zod.object({
  "id": zod.string().uuid()
})

export const getDocumentByIdReferencedDescendantsQuerySkipDefault = 0;export const getDocumentByIdReferencedDescendantsQueryTakeDefault = 20;

export const getDocumentByIdReferencedDescendantsQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getDocumentByIdReferencedDescendantsQueryTakeDefault)
})

export const getDocumentByIdReferencedDescendantsResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const putDocumentByIdUnpublishParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentByIdUnpublishBody = zod.object({
  "cultures": zod.array(zod.string()).nullish()
})


/**
 * @deprecated
 */
export const putDocumentByIdValidateParams = zod.object({
  "id": zod.string().uuid()
})

export const putDocumentByIdValidateBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "template": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const putUmbracoManagementApiV11DocumentByIdValidate11Params = zod.object({
  "id": zod.string().uuid()
})

export const putUmbracoManagementApiV11DocumentByIdValidate11Body = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "template": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "cultures": zod.array(zod.string()).nullish()
})


export const getDocumentAreReferencedQuerySkipDefault = 0;export const getDocumentAreReferencedQueryTakeDefault = 20;

export const getDocumentAreReferencedQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getDocumentAreReferencedQueryTakeDefault)
})

export const getDocumentAreReferencedResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const getDocumentConfigurationResponse = zod.object({
  "disableDeleteWhenReferenced": zod.boolean(),
  "disableUnpublishWhenReferenced": zod.boolean(),
  "allowEditInvariantFromNonDefault": zod.boolean(),
  "allowNonExistingSegmentsCreation": zod.boolean(),
  "reservedFieldNames": zod.array(zod.string())
})


export const putDocumentSortBody = zod.object({
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sorting": zod.array(zod.object({
  "id": zod.string().uuid(),
  "sortOrder": zod.number()
}))
})


export const getDocumentUrlsQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getDocumentUrlsResponseItem = zod.object({
  "id": zod.string().uuid(),
  "urlInfos": zod.array(zod.object({
  "culture": zod.string().nullable(),
  "url": zod.string()
}))
})
export const getDocumentUrlsResponse = zod.array(getDocumentUrlsResponseItem)


export const postDocumentValidateBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentType": zod.object({
  "id": zod.string().uuid()
}),
  "template": zod.object({
  "id": zod.string().uuid()
}).nullable()
})


export const getItemDocumentQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemDocumentResponseItem = zod.object({
  "id": zod.string().uuid(),
  "isTrashed": zod.boolean(),
  "isProtected": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "hasChildren": zod.boolean(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish(),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])
}))
})
export const getItemDocumentResponse = zod.array(getItemDocumentResponseItem)


export const getItemDocumentSearchQuerySkipDefault = 0;export const getItemDocumentSearchQueryTakeDefault = 100;

export const getItemDocumentSearchQueryParams = zod.object({
  "query": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemDocumentSearchQueryTakeDefault),
  "parentId": zod.string().uuid().optional(),
  "allowedDocumentTypes": zod.array(zod.string().uuid()).optional()
})

export const getItemDocumentSearchResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "isTrashed": zod.boolean(),
  "isProtected": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "hasChildren": zod.boolean(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish(),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])
}))
})),
  "total": zod.number()
})


export const deleteRecycleBinDocumentByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const getRecycleBinDocumentByIdOriginalParentParams = zod.object({
  "id": zod.string().uuid()
})

export const getRecycleBinDocumentByIdOriginalParentResponse = zod.object({
  "id": zod.string().uuid()
})


export const putRecycleBinDocumentByIdRestoreParams = zod.object({
  "id": zod.string().uuid()
})

export const putRecycleBinDocumentByIdRestoreBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getRecycleBinDocumentChildrenQuerySkipDefault = 0;export const getRecycleBinDocumentChildrenQueryTakeDefault = 100;

export const getRecycleBinDocumentChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getRecycleBinDocumentChildrenQueryTakeDefault)
})

export const getRecycleBinDocumentChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish(),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])
}))
}))
})


export const getRecycleBinDocumentRootQuerySkipDefault = 0;export const getRecycleBinDocumentRootQueryTakeDefault = 100;

export const getRecycleBinDocumentRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getRecycleBinDocumentRootQueryTakeDefault)
})

export const getRecycleBinDocumentRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish(),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])
}))
}))
})


export const getTreeDocumentAncestorsQueryParams = zod.object({
  "descendantId": zod.string().uuid().optional()
})

export const getTreeDocumentAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "noAccess": zod.boolean(),
  "isTrashed": zod.boolean(),
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "isProtected": zod.boolean(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish(),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])
}))
})
export const getTreeDocumentAncestorsResponse = zod.array(getTreeDocumentAncestorsResponseItem)


export const getTreeDocumentChildrenQuerySkipDefault = 0;export const getTreeDocumentChildrenQueryTakeDefault = 100;

export const getTreeDocumentChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDocumentChildrenQueryTakeDefault),
  "dataTypeId": zod.string().uuid().optional()
})

export const getTreeDocumentChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "noAccess": zod.boolean(),
  "isTrashed": zod.boolean(),
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "isProtected": zod.boolean(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish(),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])
}))
}))
})


export const getTreeDocumentRootQuerySkipDefault = 0;export const getTreeDocumentRootQueryTakeDefault = 100;

export const getTreeDocumentRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeDocumentRootQueryTakeDefault),
  "dataTypeId": zod.string().uuid().optional()
})

export const getTreeDocumentRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "noAccess": zod.boolean(),
  "isTrashed": zod.boolean(),
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "isProtected": zod.boolean(),
  "documentType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish(),
  "state": zod.enum(['NotCreated', 'Draft', 'Published', 'PublishedPendingChanges'])
}))
}))
})


export const postDynamicRootQueryBody = zod.object({
  "context": zod.object({
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}),
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish()
}),
  "query": zod.object({
  "origin": zod.object({
  "alias": zod.string(),
  "id": zod.string().uuid().nullish()
}),
  "steps": zod.array(zod.object({
  "alias": zod.string(),
  "documentTypeIds": zod.array(zod.string().uuid())
}))
})
})

export const postDynamicRootQueryResponse = zod.object({
  "roots": zod.array(zod.string().uuid())
})


export const getDynamicRootStepsResponseItem = zod.string()
export const getDynamicRootStepsResponse = zod.array(getDynamicRootStepsResponseItem)


export const getHealthCheckGroupQuerySkipDefault = 0;export const getHealthCheckGroupQueryTakeDefault = 100;

export const getHealthCheckGroupQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getHealthCheckGroupQueryTakeDefault)
})

export const getHealthCheckGroupResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string()
}))
})


export const getHealthCheckGroupByNameParams = zod.object({
  "name": zod.string()
})

export const getHealthCheckGroupByNameResponse = zod.object({
  "name": zod.string(),
  "checks": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "description": zod.string().nullish()
}))
})


export const postHealthCheckGroupByNameCheckParams = zod.object({
  "name": zod.string()
})

export const postHealthCheckGroupByNameCheckResponse = zod.object({
  "checks": zod.array(zod.object({
  "id": zod.string().uuid(),
  "results": zod.array(zod.object({
  "message": zod.string(),
  "resultType": zod.enum(['Success', 'Warning', 'Error', 'Info']),
  "actions": zod.array(zod.object({
  "healthCheck": zod.object({
  "id": zod.string().uuid()
}),
  "alias": zod.string().nullish(),
  "name": zod.string().nullish(),
  "description": zod.string().nullish(),
  "valueRequired": zod.boolean(),
  "providedValue": zod.string().nullish(),
  "providedValueValidation": zod.string().nullish(),
  "providedValueValidationRegex": zod.string().nullish(),
  "actionParameters": zod.record(zod.string(), zod.any()).nullish()
})).nullish(),
  "readMoreLink": zod.string().nullish()
})).nullish()
}))
})


export const postHealthCheckExecuteActionBody = zod.object({
  "healthCheck": zod.object({
  "id": zod.string().uuid()
}),
  "alias": zod.string().nullish(),
  "name": zod.string().nullish(),
  "description": zod.string().nullish(),
  "valueRequired": zod.boolean(),
  "providedValue": zod.string().nullish(),
  "providedValueValidation": zod.string().nullish(),
  "providedValueValidationRegex": zod.string().nullish(),
  "actionParameters": zod.record(zod.string(), zod.any()).nullish()
})

export const postHealthCheckExecuteActionResponse = zod.object({
  "message": zod.string(),
  "resultType": zod.enum(['Success', 'Warning', 'Error', 'Info']),
  "actions": zod.array(zod.object({
  "healthCheck": zod.object({
  "id": zod.string().uuid()
}),
  "alias": zod.string().nullish(),
  "name": zod.string().nullish(),
  "description": zod.string().nullish(),
  "valueRequired": zod.boolean(),
  "providedValue": zod.string().nullish(),
  "providedValueValidation": zod.string().nullish(),
  "providedValueValidationRegex": zod.string().nullish(),
  "actionParameters": zod.record(zod.string(), zod.any()).nullish()
})).nullish(),
  "readMoreLink": zod.string().nullish()
})


export const getHelpQuerySkipDefault = 0;export const getHelpQueryTakeDefault = 100;export const getHelpQueryBaseUrlDefault = "https://our.umbraco.com";

export const getHelpQueryParams = zod.object({
  "section": zod.string().optional(),
  "tree": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getHelpQueryTakeDefault),
  "baseUrl": zod.string().default(getHelpQueryBaseUrlDefault)
})

export const getHelpResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string().nullish(),
  "description": zod.string().nullish(),
  "url": zod.string().nullish(),
  "type": zod.string().nullish()
}))
})


export const getImagingResizeUrlsQueryHeightDefault = 200;export const getImagingResizeUrlsQueryWidthDefault = 200;

export const getImagingResizeUrlsQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional(),
  "height": zod.coerce.number().default(getImagingResizeUrlsQueryHeightDefault),
  "width": zod.coerce.number().default(getImagingResizeUrlsQueryWidthDefault),
  "mode": zod.enum(['Crop', 'Max', 'Stretch', 'Pad', 'BoxPad', 'Min']).optional()
})

export const getImagingResizeUrlsResponseItem = zod.object({
  "id": zod.string().uuid(),
  "urlInfos": zod.array(zod.object({
  "culture": zod.string().nullable(),
  "url": zod.string()
}))
})
export const getImagingResizeUrlsResponse = zod.array(getImagingResizeUrlsResponseItem)


export const getImportAnalyzeQueryParams = zod.object({
  "temporaryFileId": zod.string().uuid().optional()
})

export const getImportAnalyzeResponse = zod.object({
  "entityType": zod.string(),
  "alias": zod.string().nullish(),
  "key": zod.string().uuid().nullish()
})


export const getIndexerQuerySkipDefault = 0;export const getIndexerQueryTakeDefault = 100;

export const getIndexerQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getIndexerQueryTakeDefault)
})

export const getIndexerResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string().min(1),
  "healthStatus": zod.object({
  "status": zod.enum(['Healthy', 'Unhealthy', 'Rebuilding', 'Corrupt']),
  "message": zod.string().nullish()
}),
  "canRebuild": zod.boolean(),
  "searcherName": zod.string(),
  "documentCount": zod.number(),
  "fieldCount": zod.number(),
  "providerProperties": zod.record(zod.string(), zod.any().nullable()).nullish()
}))
})


export const getIndexerByIndexNameParams = zod.object({
  "indexName": zod.string()
})

export const getIndexerByIndexNameResponse = zod.object({
  "name": zod.string().min(1),
  "healthStatus": zod.object({
  "status": zod.enum(['Healthy', 'Unhealthy', 'Rebuilding', 'Corrupt']),
  "message": zod.string().nullish()
}),
  "canRebuild": zod.boolean(),
  "searcherName": zod.string(),
  "documentCount": zod.number(),
  "fieldCount": zod.number(),
  "providerProperties": zod.record(zod.string(), zod.any().nullable()).nullish()
})


export const postIndexerByIndexNameRebuildParams = zod.object({
  "indexName": zod.string()
})


export const getInstallSettingsResponse = zod.object({
  "user": zod.object({
  "minCharLength": zod.number(),
  "minNonAlphaNumericLength": zod.number(),
  "consentLevels": zod.array(zod.object({
  "level": zod.enum(['Minimal', 'Basic', 'Detailed']),
  "description": zod.string().min(1)
}))
}),
  "databases": zod.array(zod.object({
  "id": zod.string().uuid(),
  "sortOrder": zod.number(),
  "displayName": zod.string().min(1),
  "defaultDatabaseName": zod.string().min(1),
  "providerName": zod.string().min(1),
  "isConfigured": zod.boolean(),
  "requiresServer": zod.boolean(),
  "serverPlaceholder": zod.string().min(1),
  "requiresCredentials": zod.boolean(),
  "supportsIntegratedAuthentication": zod.boolean(),
  "requiresConnectionTest": zod.boolean()
}))
})


export const postInstallSetupBodyUserNameMin = 0;

export const postInstallSetupBodyUserNameMax = 255;


export const postInstallSetupBody = zod.object({
  "user": zod.object({
  "name": zod.string().min(postInstallSetupBodyUserNameMin).max(postInstallSetupBodyUserNameMax),
  "email": zod.string().email().min(1),
  "password": zod.string().min(1),
  "subscribeToNewsletter": zod.boolean()
}),
  "database": zod.object({
  "id": zod.string().uuid(),
  "providerName": zod.string().min(1),
  "server": zod.string().nullish(),
  "name": zod.string().nullish(),
  "username": zod.string().nullish(),
  "password": zod.string().nullish(),
  "useIntegratedAuthentication": zod.boolean(),
  "connectionString": zod.string().nullish(),
  "trustServerCertificate": zod.boolean()
}),
  "telemetryLevel": zod.enum(['Minimal', 'Basic', 'Detailed'])
})


export const postInstallValidateDatabaseBody = zod.object({
  "id": zod.string().uuid(),
  "providerName": zod.string().min(1),
  "server": zod.string().nullish(),
  "name": zod.string().nullish(),
  "username": zod.string().nullish(),
  "password": zod.string().nullish(),
  "useIntegratedAuthentication": zod.boolean(),
  "connectionString": zod.string().nullish(),
  "trustServerCertificate": zod.boolean()
})


export const getItemLanguageQueryParams = zod.object({
  "isoCode": zod.array(zod.string()).optional()
})

export const getItemLanguageResponseItem = zod.object({
  "name": zod.string().min(1),
  "isoCode": zod.string().min(1)
})
export const getItemLanguageResponse = zod.array(getItemLanguageResponseItem)


export const getItemLanguageDefaultResponse = zod.object({
  "name": zod.string().min(1),
  "isoCode": zod.string().min(1)
})


export const getLanguageQuerySkipDefault = 0;export const getLanguageQueryTakeDefault = 100;

export const getLanguageQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getLanguageQueryTakeDefault)
})

export const getLanguageResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string().min(1),
  "isDefault": zod.boolean(),
  "isMandatory": zod.boolean(),
  "fallbackIsoCode": zod.string().nullish(),
  "isoCode": zod.string().min(1)
}))
})


export const postLanguageBody = zod.object({
  "name": zod.string().min(1),
  "isDefault": zod.boolean(),
  "isMandatory": zod.boolean(),
  "fallbackIsoCode": zod.string().nullish(),
  "isoCode": zod.string().min(1)
})


export const getLanguageByIsoCodeParams = zod.object({
  "isoCode": zod.string()
})

export const getLanguageByIsoCodeResponse = zod.object({
  "name": zod.string().min(1),
  "isDefault": zod.boolean(),
  "isMandatory": zod.boolean(),
  "fallbackIsoCode": zod.string().nullish(),
  "isoCode": zod.string().min(1)
})


export const deleteLanguageByIsoCodeParams = zod.object({
  "isoCode": zod.string()
})


export const putLanguageByIsoCodeParams = zod.object({
  "isoCode": zod.string()
})

export const putLanguageByIsoCodeBody = zod.object({
  "name": zod.string().min(1),
  "isDefault": zod.boolean(),
  "isMandatory": zod.boolean(),
  "fallbackIsoCode": zod.string().nullish()
})


export const getLogViewerLevelQuerySkipDefault = 0;export const getLogViewerLevelQueryTakeDefault = 100;

export const getLogViewerLevelQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getLogViewerLevelQueryTakeDefault)
})

export const getLogViewerLevelResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string(),
  "level": zod.enum(['Verbose', 'Debug', 'Information', 'Warning', 'Error', 'Fatal'])
}))
})


export const getLogViewerLevelCountQueryParams = zod.object({
  "startDate": zod.string().datetime({"local":true}).optional(),
  "endDate": zod.string().datetime({"local":true}).optional()
})

export const getLogViewerLevelCountResponse = zod.object({
  "information": zod.number(),
  "debug": zod.number(),
  "warning": zod.number(),
  "error": zod.number(),
  "fatal": zod.number()
})


export const getLogViewerLogQuerySkipDefault = 0;export const getLogViewerLogQueryTakeDefault = 100;

export const getLogViewerLogQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getLogViewerLogQueryTakeDefault),
  "orderDirection": zod.enum(['Ascending', 'Descending']).optional(),
  "filterExpression": zod.string().optional(),
  "logLevel": zod.array(zod.enum(['Verbose', 'Debug', 'Information', 'Warning', 'Error', 'Fatal'])).optional(),
  "startDate": zod.string().datetime({"local":true}).optional(),
  "endDate": zod.string().datetime({"local":true}).optional()
})

export const getLogViewerLogResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "timestamp": zod.string().datetime({"local":true}),
  "level": zod.enum(['Verbose', 'Debug', 'Information', 'Warning', 'Error', 'Fatal']),
  "messageTemplate": zod.string().nullish(),
  "renderedMessage": zod.string().nullish(),
  "properties": zod.array(zod.object({
  "name": zod.string(),
  "value": zod.string().nullish()
})),
  "exception": zod.string().nullish()
}))
})


export const getLogViewerMessageTemplateQuerySkipDefault = 0;export const getLogViewerMessageTemplateQueryTakeDefault = 100;

export const getLogViewerMessageTemplateQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getLogViewerMessageTemplateQueryTakeDefault),
  "startDate": zod.string().datetime({"local":true}).optional(),
  "endDate": zod.string().datetime({"local":true}).optional()
})

export const getLogViewerMessageTemplateResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "messageTemplate": zod.string().nullish(),
  "count": zod.number()
}))
})


export const getLogViewerSavedSearchQuerySkipDefault = 0;export const getLogViewerSavedSearchQueryTakeDefault = 100;

export const getLogViewerSavedSearchQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getLogViewerSavedSearchQueryTakeDefault)
})

export const getLogViewerSavedSearchResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string(),
  "query": zod.string()
}))
})


export const postLogViewerSavedSearchBody = zod.object({
  "name": zod.string(),
  "query": zod.string()
})


export const getLogViewerSavedSearchByNameParams = zod.object({
  "name": zod.string()
})

export const getLogViewerSavedSearchByNameResponse = zod.object({
  "name": zod.string(),
  "query": zod.string()
})


export const deleteLogViewerSavedSearchByNameParams = zod.object({
  "name": zod.string()
})


export const getLogViewerValidateLogsSizeQueryParams = zod.object({
  "startDate": zod.string().datetime({"local":true}).optional(),
  "endDate": zod.string().datetime({"local":true}).optional()
})


export const getManifestManifestResponseItem = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().nullish(),
  "version": zod.string().nullish(),
  "extensions": zod.array(zod.any())
})
export const getManifestManifestResponse = zod.array(getManifestManifestResponseItem)


export const getManifestManifestPrivateResponseItem = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().nullish(),
  "version": zod.string().nullish(),
  "extensions": zod.array(zod.any())
})
export const getManifestManifestPrivateResponse = zod.array(getManifestManifestPrivateResponseItem)


export const getManifestManifestPublicResponseItem = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().nullish(),
  "version": zod.string().nullish(),
  "extensions": zod.array(zod.any())
})
export const getManifestManifestPublicResponse = zod.array(getManifestManifestPublicResponseItem)


export const getItemMediaTypeQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemMediaTypeResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})
export const getItemMediaTypeResponse = zod.array(getItemMediaTypeResponseItem)


export const getItemMediaTypeAllowedQuerySkipDefault = 0;export const getItemMediaTypeAllowedQueryTakeDefault = 100;

export const getItemMediaTypeAllowedQueryParams = zod.object({
  "fileExtension": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemMediaTypeAllowedQueryTakeDefault)
})

export const getItemMediaTypeAllowedResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})),
  "total": zod.number()
})


export const getItemMediaTypeFoldersQuerySkipDefault = 0;export const getItemMediaTypeFoldersQueryTakeDefault = 100;

export const getItemMediaTypeFoldersQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemMediaTypeFoldersQueryTakeDefault)
})

export const getItemMediaTypeFoldersResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})),
  "total": zod.number()
})


export const getItemMediaTypeSearchQuerySkipDefault = 0;export const getItemMediaTypeSearchQueryTakeDefault = 100;

export const getItemMediaTypeSearchQueryParams = zod.object({
  "query": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemMediaTypeSearchQueryTakeDefault)
})

export const getItemMediaTypeSearchResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})),
  "total": zod.number()
})


export const postMediaTypeBody = zod.object({
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "icon": zod.string().min(1),
  "allowedAsRoot": zod.boolean(),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "isElement": zod.boolean(),
  "properties": zod.array(zod.object({
  "id": zod.string().uuid(),
  "container": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sortOrder": zod.number(),
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "dataType": zod.object({
  "id": zod.string().uuid()
}),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "validation": zod.object({
  "mandatory": zod.boolean(),
  "mandatoryMessage": zod.string().nullish(),
  "regEx": zod.string().nullish(),
  "regExMessage": zod.string().nullish()
}),
  "appearance": zod.object({
  "labelOnTop": zod.boolean()
})
})),
  "containers": zod.array(zod.object({
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string().nullish(),
  "type": zod.string().min(1),
  "sortOrder": zod.number()
})),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "allowedMediaTypes": zod.array(zod.object({
  "mediaType": zod.object({
  "id": zod.string().uuid()
}),
  "sortOrder": zod.number()
})),
  "compositions": zod.array(zod.object({
  "mediaType": zod.object({
  "id": zod.string().uuid()
}),
  "compositionType": zod.enum(['Composition', 'Inheritance'])
})),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getMediaTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getMediaTypeByIdResponse = zod.object({
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "icon": zod.string().min(1),
  "allowedAsRoot": zod.boolean(),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isElement": zod.boolean(),
  "properties": zod.array(zod.object({
  "id": zod.string().uuid(),
  "container": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sortOrder": zod.number(),
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "dataType": zod.object({
  "id": zod.string().uuid()
}),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "validation": zod.object({
  "mandatory": zod.boolean(),
  "mandatoryMessage": zod.string().nullish(),
  "regEx": zod.string().nullish(),
  "regExMessage": zod.string().nullish()
}),
  "appearance": zod.object({
  "labelOnTop": zod.boolean()
})
})),
  "containers": zod.array(zod.object({
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string().nullish(),
  "type": zod.string().min(1),
  "sortOrder": zod.number()
})),
  "id": zod.string().uuid(),
  "allowedMediaTypes": zod.array(zod.object({
  "mediaType": zod.object({
  "id": zod.string().uuid()
}),
  "sortOrder": zod.number()
})),
  "compositions": zod.array(zod.object({
  "mediaType": zod.object({
  "id": zod.string().uuid()
}),
  "compositionType": zod.enum(['Composition', 'Inheritance'])
})),
  "isDeletable": zod.boolean(),
  "aliasCanBeChanged": zod.boolean()
})


export const deleteMediaTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putMediaTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putMediaTypeByIdBody = zod.object({
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "icon": zod.string().min(1),
  "allowedAsRoot": zod.boolean(),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isElement": zod.boolean(),
  "properties": zod.array(zod.object({
  "id": zod.string().uuid(),
  "container": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sortOrder": zod.number(),
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "dataType": zod.object({
  "id": zod.string().uuid()
}),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "validation": zod.object({
  "mandatory": zod.boolean(),
  "mandatoryMessage": zod.string().nullish(),
  "regEx": zod.string().nullish(),
  "regExMessage": zod.string().nullish()
}),
  "appearance": zod.object({
  "labelOnTop": zod.boolean()
})
})),
  "containers": zod.array(zod.object({
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string().nullish(),
  "type": zod.string().min(1),
  "sortOrder": zod.number()
})),
  "allowedMediaTypes": zod.array(zod.object({
  "mediaType": zod.object({
  "id": zod.string().uuid()
}),
  "sortOrder": zod.number()
})),
  "compositions": zod.array(zod.object({
  "mediaType": zod.object({
  "id": zod.string().uuid()
}),
  "compositionType": zod.enum(['Composition', 'Inheritance'])
}))
})


export const getMediaTypeByIdAllowedChildrenParams = zod.object({
  "id": zod.string().uuid()
})

export const getMediaTypeByIdAllowedChildrenQuerySkipDefault = 0;export const getMediaTypeByIdAllowedChildrenQueryTakeDefault = 100;

export const getMediaTypeByIdAllowedChildrenQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getMediaTypeByIdAllowedChildrenQueryTakeDefault)
})

export const getMediaTypeByIdAllowedChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "description": zod.string().nullish(),
  "icon": zod.string().nullish()
}))
})


export const getMediaTypeByIdCompositionReferencesParams = zod.object({
  "id": zod.string().uuid()
})

export const getMediaTypeByIdCompositionReferencesResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string()
})
export const getMediaTypeByIdCompositionReferencesResponse = zod.array(getMediaTypeByIdCompositionReferencesResponseItem)


export const postMediaTypeByIdCopyParams = zod.object({
  "id": zod.string().uuid()
})

export const postMediaTypeByIdCopyBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getMediaTypeByIdExportParams = zod.object({
  "id": zod.string().uuid()
})

export const getMediaTypeByIdExportResponse = zod.instanceof(File)


export const putMediaTypeByIdImportParams = zod.object({
  "id": zod.string().uuid()
})

export const putMediaTypeByIdImportBody = zod.object({
  "file": zod.object({
  "id": zod.string().uuid()
})
})


export const putMediaTypeByIdMoveParams = zod.object({
  "id": zod.string().uuid()
})

export const putMediaTypeByIdMoveBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getMediaTypeAllowedAtRootQuerySkipDefault = 0;export const getMediaTypeAllowedAtRootQueryTakeDefault = 100;

export const getMediaTypeAllowedAtRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getMediaTypeAllowedAtRootQueryTakeDefault)
})

export const getMediaTypeAllowedAtRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "description": zod.string().nullish(),
  "icon": zod.string().nullish()
}))
})


export const postMediaTypeAvailableCompositionsBody = zod.object({
  "id": zod.string().uuid().nullish(),
  "currentPropertyAliases": zod.array(zod.string()),
  "currentCompositeIds": zod.array(zod.string().uuid())
})

export const postMediaTypeAvailableCompositionsResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string(),
  "folderPath": zod.array(zod.string()),
  "isCompatible": zod.boolean()
})
export const postMediaTypeAvailableCompositionsResponse = zod.array(postMediaTypeAvailableCompositionsResponseItem)


export const getMediaTypeConfigurationResponse = zod.object({
  "reservedFieldNames": zod.array(zod.string())
})


export const postMediaTypeFolderBody = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getMediaTypeFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getMediaTypeFolderByIdResponse = zod.object({
  "name": zod.string().min(1),
  "id": zod.string().uuid()
})


export const deleteMediaTypeFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putMediaTypeFolderByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putMediaTypeFolderByIdBody = zod.object({
  "name": zod.string().min(1)
})


export const postMediaTypeImportBody = zod.object({
  "file": zod.object({
  "id": zod.string().uuid()
})
})


export const getTreeMediaTypeAncestorsQueryParams = zod.object({
  "descendantId": zod.string().uuid().optional()
})

export const getTreeMediaTypeAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "icon": zod.string(),
  "isDeletable": zod.boolean()
})
export const getTreeMediaTypeAncestorsResponse = zod.array(getTreeMediaTypeAncestorsResponseItem)


export const getTreeMediaTypeChildrenQuerySkipDefault = 0;export const getTreeMediaTypeChildrenQueryTakeDefault = 100;export const getTreeMediaTypeChildrenQueryFoldersOnlyDefault = false;

export const getTreeMediaTypeChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeMediaTypeChildrenQueryTakeDefault),
  "foldersOnly": zod.coerce.boolean().optional()
})

export const getTreeMediaTypeChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "icon": zod.string(),
  "isDeletable": zod.boolean()
}))
})


export const getTreeMediaTypeRootQuerySkipDefault = 0;export const getTreeMediaTypeRootQueryTakeDefault = 100;export const getTreeMediaTypeRootQueryFoldersOnlyDefault = false;

export const getTreeMediaTypeRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeMediaTypeRootQueryTakeDefault),
  "foldersOnly": zod.coerce.boolean().optional()
})

export const getTreeMediaTypeRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "isFolder": zod.boolean(),
  "icon": zod.string(),
  "isDeletable": zod.boolean()
}))
})


export const getCollectionMediaQueryOrderByDefault = "updateDate";export const getCollectionMediaQuerySkipDefault = 0;export const getCollectionMediaQueryTakeDefault = 100;

export const getCollectionMediaQueryParams = zod.object({
  "id": zod.string().uuid().optional(),
  "dataTypeId": zod.string().uuid().optional(),
  "orderBy": zod.string().default(getCollectionMediaQueryOrderByDefault),
  "orderDirection": zod.enum(['Ascending', 'Descending']).optional(),
  "filter": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getCollectionMediaQueryTakeDefault)
})

export const getCollectionMediaResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish(),
  "editorAlias": zod.string().min(1)
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true})
})),
  "id": zod.string().uuid(),
  "creator": zod.string().nullish(),
  "sortOrder": zod.number(),
  "mediaType": zod.object({
  "id": zod.string().uuid(),
  "alias": zod.string(),
  "icon": zod.string()
})
}))
})


export const getItemMediaQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemMediaResponseItem = zod.object({
  "id": zod.string().uuid(),
  "isTrashed": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "hasChildren": zod.boolean(),
  "mediaType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
}))
})
export const getItemMediaResponse = zod.array(getItemMediaResponseItem)


export const getItemMediaSearchQuerySkipDefault = 0;export const getItemMediaSearchQueryTakeDefault = 100;

export const getItemMediaSearchQueryParams = zod.object({
  "query": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemMediaSearchQueryTakeDefault),
  "parentId": zod.string().uuid().optional(),
  "allowedMediaTypes": zod.array(zod.string().uuid()).optional()
})

export const getItemMediaSearchResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "isTrashed": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "hasChildren": zod.boolean(),
  "mediaType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
}))
})),
  "total": zod.number()
})


export const postMediaBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "mediaType": zod.object({
  "id": zod.string().uuid()
})
})


export const getMediaByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getMediaByIdResponse = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish(),
  "editorAlias": zod.string().min(1)
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true})
})),
  "id": zod.string().uuid(),
  "urls": zod.array(zod.object({
  "culture": zod.string().nullable(),
  "url": zod.string()
})),
  "isTrashed": zod.boolean(),
  "mediaType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
})
})


export const deleteMediaByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putMediaByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putMediaByIdBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
}))
})


export const getMediaByIdAuditLogParams = zod.object({
  "id": zod.string().uuid()
})

export const getMediaByIdAuditLogQuerySkipDefault = 0;export const getMediaByIdAuditLogQueryTakeDefault = 100;

export const getMediaByIdAuditLogQueryParams = zod.object({
  "orderDirection": zod.enum(['Ascending', 'Descending']).optional(),
  "sinceDate": zod.string().datetime({"local":true}).optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getMediaByIdAuditLogQueryTakeDefault)
})

export const getMediaByIdAuditLogResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "user": zod.object({
  "id": zod.string().uuid()
}),
  "timestamp": zod.string().datetime({"local":true}),
  "logType": zod.enum(['New', 'Save', 'SaveVariant', 'Open', 'Delete', 'Publish', 'PublishVariant', 'SendToPublish', 'SendToPublishVariant', 'Unpublish', 'UnpublishVariant', 'Move', 'Copy', 'AssignDomain', 'PublicAccess', 'Sort', 'Notify', 'System', 'RollBack', 'PackagerInstall', 'PackagerUninstall', 'Custom', 'ContentVersionPreventCleanup', 'ContentVersionEnableCleanup']),
  "comment": zod.string().nullish(),
  "parameters": zod.string().nullish()
}))
})


export const putMediaByIdMoveParams = zod.object({
  "id": zod.string().uuid()
})

export const putMediaByIdMoveBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const putMediaByIdMoveToRecycleBinParams = zod.object({
  "id": zod.string().uuid()
})


export const getMediaByIdReferencedByParams = zod.object({
  "id": zod.string().uuid()
})

export const getMediaByIdReferencedByQuerySkipDefault = 0;export const getMediaByIdReferencedByQueryTakeDefault = 20;

export const getMediaByIdReferencedByQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getMediaByIdReferencedByQueryTakeDefault)
})

export const getMediaByIdReferencedByResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "$type": zod.enum(['DefaultReferenceResponseModel']),
  "id": zod.string().uuid(),
  "name": zod.string().nullish(),
  "type": zod.string().nullish(),
  "icon": zod.string().nullish()
}).or(zod.object({
  "$type": zod.enum(['DocumentReferenceResponseModel']),
  "id": zod.string().uuid(),
  "name": zod.string().nullish(),
  "published": zod.boolean().nullish(),
  "documentType": zod.object({
  "icon": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "name": zod.string().nullish()
})
})).or(zod.object({
  "$type": zod.enum(['MediaReferenceResponseModel']),
  "id": zod.string().uuid(),
  "name": zod.string().nullish(),
  "mediaType": zod.object({
  "icon": zod.string().nullish(),
  "alias": zod.string().nullish(),
  "name": zod.string().nullish()
})
})))
})


export const getMediaByIdReferencedDescendantsParams = zod.object({
  "id": zod.string().uuid()
})

export const getMediaByIdReferencedDescendantsQuerySkipDefault = 0;export const getMediaByIdReferencedDescendantsQueryTakeDefault = 20;

export const getMediaByIdReferencedDescendantsQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getMediaByIdReferencedDescendantsQueryTakeDefault)
})

export const getMediaByIdReferencedDescendantsResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const putMediaByIdValidateParams = zod.object({
  "id": zod.string().uuid()
})

export const putMediaByIdValidateBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
}))
})


export const getMediaAreReferencedQuerySkipDefault = 0;export const getMediaAreReferencedQueryTakeDefault = 20;

export const getMediaAreReferencedQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getMediaAreReferencedQueryTakeDefault)
})

export const getMediaAreReferencedResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const getMediaConfigurationResponse = zod.object({
  "disableDeleteWhenReferenced": zod.boolean(),
  "disableUnpublishWhenReferenced": zod.boolean(),
  "reservedFieldNames": zod.array(zod.string())
})


export const putMediaSortBody = zod.object({
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sorting": zod.array(zod.object({
  "id": zod.string().uuid(),
  "sortOrder": zod.number()
}))
})


export const getMediaUrlsQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getMediaUrlsResponseItem = zod.object({
  "id": zod.string().uuid(),
  "urlInfos": zod.array(zod.object({
  "culture": zod.string().nullable(),
  "url": zod.string()
}))
})
export const getMediaUrlsResponse = zod.array(getMediaUrlsResponseItem)


export const postMediaValidateBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "id": zod.string().uuid().nullish(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "mediaType": zod.object({
  "id": zod.string().uuid()
})
})


export const deleteRecycleBinMediaByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const getRecycleBinMediaByIdOriginalParentParams = zod.object({
  "id": zod.string().uuid()
})

export const getRecycleBinMediaByIdOriginalParentResponse = zod.object({
  "id": zod.string().uuid()
})


export const putRecycleBinMediaByIdRestoreParams = zod.object({
  "id": zod.string().uuid()
})

export const putRecycleBinMediaByIdRestoreBody = zod.object({
  "target": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const getRecycleBinMediaChildrenQuerySkipDefault = 0;export const getRecycleBinMediaChildrenQueryTakeDefault = 100;

export const getRecycleBinMediaChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getRecycleBinMediaChildrenQueryTakeDefault)
})

export const getRecycleBinMediaChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "mediaType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
}))
}))
})


export const getRecycleBinMediaRootQuerySkipDefault = 0;export const getRecycleBinMediaRootQueryTakeDefault = 100;

export const getRecycleBinMediaRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getRecycleBinMediaRootQueryTakeDefault)
})

export const getRecycleBinMediaRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "mediaType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
}))
}))
})


export const getTreeMediaAncestorsQueryParams = zod.object({
  "descendantId": zod.string().uuid().optional()
})

export const getTreeMediaAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "noAccess": zod.boolean(),
  "isTrashed": zod.boolean(),
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "mediaType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
}))
})
export const getTreeMediaAncestorsResponse = zod.array(getTreeMediaAncestorsResponseItem)


export const getTreeMediaChildrenQuerySkipDefault = 0;export const getTreeMediaChildrenQueryTakeDefault = 100;

export const getTreeMediaChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeMediaChildrenQueryTakeDefault),
  "dataTypeId": zod.string().uuid().optional()
})

export const getTreeMediaChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "noAccess": zod.boolean(),
  "isTrashed": zod.boolean(),
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "mediaType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
}))
}))
})


export const getTreeMediaRootQuerySkipDefault = 0;export const getTreeMediaRootQueryTakeDefault = 100;

export const getTreeMediaRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeMediaRootQueryTakeDefault),
  "dataTypeId": zod.string().uuid().optional()
})

export const getTreeMediaRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "noAccess": zod.boolean(),
  "isTrashed": zod.boolean(),
  "id": zod.string().uuid(),
  "createDate": zod.string().datetime({"local":true}),
  "mediaType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
}))
}))
})


export const getItemMemberGroupQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemMemberGroupResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string()
})
export const getItemMemberGroupResponse = zod.array(getItemMemberGroupResponseItem)


export const getMemberGroupQuerySkipDefault = 0;export const getMemberGroupQueryTakeDefault = 100;

export const getMemberGroupQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getMemberGroupQueryTakeDefault)
})

export const getMemberGroupResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string(),
  "id": zod.string().uuid()
}))
})


export const postMemberGroupBody = zod.object({
  "name": zod.string(),
  "id": zod.string().uuid().nullish()
})


export const getMemberGroupByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getMemberGroupByIdResponse = zod.object({
  "name": zod.string(),
  "id": zod.string().uuid()
})


export const deleteMemberGroupByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putMemberGroupByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putMemberGroupByIdBody = zod.object({
  "name": zod.string()
})


export const getTreeMemberGroupRootQuerySkipDefault = 0;export const getTreeMemberGroupRootQueryTakeDefault = 100;

export const getTreeMemberGroupRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeMemberGroupRootQueryTakeDefault)
})

export const getTreeMemberGroupRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string()
}))
})


export const getItemMemberTypeQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemMemberTypeResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})
export const getItemMemberTypeResponse = zod.array(getItemMemberTypeResponseItem)


export const getItemMemberTypeSearchQuerySkipDefault = 0;export const getItemMemberTypeSearchQueryTakeDefault = 100;

export const getItemMemberTypeSearchQueryParams = zod.object({
  "query": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemMemberTypeSearchQueryTakeDefault)
})

export const getItemMemberTypeSearchResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish()
})),
  "total": zod.number()
})


export const postMemberTypeBody = zod.object({
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "icon": zod.string().min(1),
  "allowedAsRoot": zod.boolean(),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isElement": zod.boolean(),
  "properties": zod.array(zod.object({
  "id": zod.string().uuid(),
  "container": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sortOrder": zod.number(),
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "dataType": zod.object({
  "id": zod.string().uuid()
}),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "validation": zod.object({
  "mandatory": zod.boolean(),
  "mandatoryMessage": zod.string().nullish(),
  "regEx": zod.string().nullish(),
  "regExMessage": zod.string().nullish()
}),
  "appearance": zod.object({
  "labelOnTop": zod.boolean()
}),
  "isSensitive": zod.boolean(),
  "visibility": zod.object({
  "memberCanView": zod.boolean(),
  "memberCanEdit": zod.boolean()
})
})),
  "containers": zod.array(zod.object({
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string().nullish(),
  "type": zod.string().min(1),
  "sortOrder": zod.number()
})),
  "id": zod.string().uuid().nullish(),
  "compositions": zod.array(zod.object({
  "memberType": zod.object({
  "id": zod.string().uuid()
}),
  "compositionType": zod.enum(['Composition', 'Inheritance'])
}))
})


export const getMemberTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getMemberTypeByIdResponse = zod.object({
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "icon": zod.string().min(1),
  "allowedAsRoot": zod.boolean(),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isElement": zod.boolean(),
  "properties": zod.array(zod.object({
  "id": zod.string().uuid(),
  "container": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sortOrder": zod.number(),
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "dataType": zod.object({
  "id": zod.string().uuid()
}),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "validation": zod.object({
  "mandatory": zod.boolean(),
  "mandatoryMessage": zod.string().nullish(),
  "regEx": zod.string().nullish(),
  "regExMessage": zod.string().nullish()
}),
  "appearance": zod.object({
  "labelOnTop": zod.boolean()
}),
  "isSensitive": zod.boolean(),
  "visibility": zod.object({
  "memberCanView": zod.boolean(),
  "memberCanEdit": zod.boolean()
})
})),
  "containers": zod.array(zod.object({
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string().nullish(),
  "type": zod.string().min(1),
  "sortOrder": zod.number()
})),
  "id": zod.string().uuid(),
  "compositions": zod.array(zod.object({
  "memberType": zod.object({
  "id": zod.string().uuid()
}),
  "compositionType": zod.enum(['Composition', 'Inheritance'])
}))
})


export const deleteMemberTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putMemberTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putMemberTypeByIdBody = zod.object({
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "icon": zod.string().min(1),
  "allowedAsRoot": zod.boolean(),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "isElement": zod.boolean(),
  "properties": zod.array(zod.object({
  "id": zod.string().uuid(),
  "container": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "sortOrder": zod.number(),
  "alias": zod.string().min(1),
  "name": zod.string().min(1),
  "description": zod.string().nullish(),
  "dataType": zod.object({
  "id": zod.string().uuid()
}),
  "variesByCulture": zod.boolean(),
  "variesBySegment": zod.boolean(),
  "validation": zod.object({
  "mandatory": zod.boolean(),
  "mandatoryMessage": zod.string().nullish(),
  "regEx": zod.string().nullish(),
  "regExMessage": zod.string().nullish()
}),
  "appearance": zod.object({
  "labelOnTop": zod.boolean()
}),
  "isSensitive": zod.boolean(),
  "visibility": zod.object({
  "memberCanView": zod.boolean(),
  "memberCanEdit": zod.boolean()
})
})),
  "containers": zod.array(zod.object({
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string().nullish(),
  "type": zod.string().min(1),
  "sortOrder": zod.number()
})),
  "compositions": zod.array(zod.object({
  "memberType": zod.object({
  "id": zod.string().uuid()
}),
  "compositionType": zod.enum(['Composition', 'Inheritance'])
}))
})


export const getMemberTypeByIdCompositionReferencesParams = zod.object({
  "id": zod.string().uuid()
})

export const getMemberTypeByIdCompositionReferencesResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string()
})
export const getMemberTypeByIdCompositionReferencesResponse = zod.array(getMemberTypeByIdCompositionReferencesResponseItem)


export const postMemberTypeByIdCopyParams = zod.object({
  "id": zod.string().uuid()
})


export const postMemberTypeAvailableCompositionsBody = zod.object({
  "id": zod.string().uuid().nullish(),
  "currentPropertyAliases": zod.array(zod.string()),
  "currentCompositeIds": zod.array(zod.string().uuid())
})

export const postMemberTypeAvailableCompositionsResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string(),
  "folderPath": zod.array(zod.string()),
  "isCompatible": zod.boolean()
})
export const postMemberTypeAvailableCompositionsResponse = zod.array(postMemberTypeAvailableCompositionsResponseItem)


export const getMemberTypeConfigurationResponse = zod.object({
  "reservedFieldNames": zod.array(zod.string())
})


export const getTreeMemberTypeRootQuerySkipDefault = 0;export const getTreeMemberTypeRootQueryTakeDefault = 100;

export const getTreeMemberTypeRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeMemberTypeRootQueryTakeDefault)
})

export const getTreeMemberTypeRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string(),
  "icon": zod.string()
}))
})


export const getFilterMemberQueryOrderByDefault = "username";export const getFilterMemberQuerySkipDefault = 0;export const getFilterMemberQueryTakeDefault = 100;

export const getFilterMemberQueryParams = zod.object({
  "memberTypeId": zod.string().uuid().optional(),
  "memberGroupName": zod.string().optional(),
  "isApproved": zod.coerce.boolean().optional(),
  "isLockedOut": zod.coerce.boolean().optional(),
  "orderBy": zod.string().default(getFilterMemberQueryOrderByDefault),
  "orderDirection": zod.enum(['Ascending', 'Descending']).optional(),
  "filter": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getFilterMemberQueryTakeDefault)
})

export const getFilterMemberResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish(),
  "editorAlias": zod.string().min(1)
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true})
})),
  "id": zod.string().uuid(),
  "email": zod.string(),
  "username": zod.string(),
  "memberType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "isApproved": zod.boolean(),
  "isLockedOut": zod.boolean(),
  "isTwoFactorEnabled": zod.boolean(),
  "failedPasswordAttempts": zod.number(),
  "lastLoginDate": zod.string().datetime({"local":true}).nullish(),
  "lastLockoutDate": zod.string().datetime({"local":true}).nullish(),
  "lastPasswordChangeDate": zod.string().datetime({"local":true}).nullish(),
  "groups": zod.array(zod.string().uuid()),
  "kind": zod.enum(['Default', 'Api'])
}))
})


export const getItemMemberQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemMemberResponseItem = zod.object({
  "id": zod.string().uuid(),
  "memberType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
})),
  "kind": zod.enum(['Default', 'Api'])
})
export const getItemMemberResponse = zod.array(getItemMemberResponseItem)


export const getItemMemberSearchQuerySkipDefault = 0;export const getItemMemberSearchQueryTakeDefault = 100;

export const getItemMemberSearchQueryParams = zod.object({
  "query": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemMemberSearchQueryTakeDefault),
  "allowedMemberTypes": zod.array(zod.string().uuid()).optional()
})

export const getItemMemberSearchResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "memberType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "variants": zod.array(zod.object({
  "name": zod.string(),
  "culture": zod.string().nullish()
})),
  "kind": zod.enum(['Default', 'Api'])
})),
  "total": zod.number()
})


export const postMemberBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "id": zod.string().uuid().nullish(),
  "email": zod.string(),
  "username": zod.string(),
  "password": zod.string(),
  "memberType": zod.object({
  "id": zod.string().uuid()
}),
  "groups": zod.array(zod.string().uuid()).nullish(),
  "isApproved": zod.boolean()
})


export const getMemberByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getMemberByIdResponse = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish(),
  "editorAlias": zod.string().min(1)
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true})
})),
  "id": zod.string().uuid(),
  "email": zod.string(),
  "username": zod.string(),
  "memberType": zod.object({
  "id": zod.string().uuid(),
  "icon": zod.string(),
  "collection": zod.object({
  "id": zod.string().uuid()
}).nullish()
}),
  "isApproved": zod.boolean(),
  "isLockedOut": zod.boolean(),
  "isTwoFactorEnabled": zod.boolean(),
  "failedPasswordAttempts": zod.number(),
  "lastLoginDate": zod.string().datetime({"local":true}).nullish(),
  "lastLockoutDate": zod.string().datetime({"local":true}).nullish(),
  "lastPasswordChangeDate": zod.string().datetime({"local":true}).nullish(),
  "groups": zod.array(zod.string().uuid()),
  "kind": zod.enum(['Default', 'Api'])
})


export const deleteMemberByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putMemberByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putMemberByIdBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "email": zod.string(),
  "username": zod.string(),
  "oldPassword": zod.string().nullish(),
  "newPassword": zod.string().nullish(),
  "groups": zod.array(zod.string().uuid()).nullish(),
  "isApproved": zod.boolean(),
  "isLockedOut": zod.boolean(),
  "isTwoFactorEnabled": zod.boolean()
})


export const putMemberByIdValidateParams = zod.object({
  "id": zod.string().uuid()
})

export const putMemberByIdValidateBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "email": zod.string(),
  "username": zod.string(),
  "oldPassword": zod.string().nullish(),
  "newPassword": zod.string().nullish(),
  "groups": zod.array(zod.string().uuid()).nullish(),
  "isApproved": zod.boolean(),
  "isLockedOut": zod.boolean(),
  "isTwoFactorEnabled": zod.boolean()
})


export const getMemberConfigurationResponse = zod.object({
  "reservedFieldNames": zod.array(zod.string())
})


export const postMemberValidateBody = zod.object({
  "values": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "alias": zod.string().min(1),
  "value": zod.any().nullish()
})),
  "variants": zod.array(zod.object({
  "culture": zod.string().nullish(),
  "segment": zod.string().nullish(),
  "name": zod.string().min(1)
})),
  "id": zod.string().uuid().nullish(),
  "email": zod.string(),
  "username": zod.string(),
  "password": zod.string(),
  "memberType": zod.object({
  "id": zod.string().uuid()
}),
  "groups": zod.array(zod.string().uuid()).nullish(),
  "isApproved": zod.boolean()
})


export const getModelsBuilderDashboardResponse = zod.object({
  "mode": zod.enum(['Nothing', 'InMemoryAuto', 'SourceCodeManual', 'SourceCodeAuto']),
  "canGenerate": zod.boolean(),
  "outOfDateModels": zod.boolean(),
  "lastError": zod.string().nullish(),
  "version": zod.string().nullish(),
  "modelsNamespace": zod.string().nullish(),
  "trackingOutOfDateModels": zod.boolean()
})


export const getModelsBuilderStatusResponse = zod.object({
  "status": zod.enum(['OutOfDate', 'Current', 'Unknown'])
})


export const getObjectTypesQuerySkipDefault = 0;export const getObjectTypesQueryTakeDefault = 100;

export const getObjectTypesQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getObjectTypesQueryTakeDefault)
})

export const getObjectTypesResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string().nullish(),
  "id": zod.string().uuid()
}))
})


export const getOembedQueryQueryParams = zod.object({
  "url": zod.string().url().optional(),
  "maxWidth": zod.coerce.number().optional(),
  "maxHeight": zod.coerce.number().optional()
})

export const getOembedQueryResponse = zod.object({
  "markup": zod.string()
})


export const postPackageByNameRunMigrationParams = zod.object({
  "name": zod.string()
})


export const getPackageConfigurationResponse = zod.object({
  "marketplaceUrl": zod.string()
})


export const getPackageCreatedQuerySkipDefault = 0;export const getPackageCreatedQueryTakeDefault = 100;

export const getPackageCreatedQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getPackageCreatedQueryTakeDefault)
})

export const getPackageCreatedResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string(),
  "contentNodeId": zod.string().nullish(),
  "contentLoadChildNodes": zod.boolean(),
  "mediaIds": zod.array(zod.string().uuid()),
  "mediaLoadChildNodes": zod.boolean(),
  "documentTypes": zod.array(zod.string()),
  "mediaTypes": zod.array(zod.string()),
  "dataTypes": zod.array(zod.string()),
  "templates": zod.array(zod.string()),
  "partialViews": zod.array(zod.string()),
  "stylesheets": zod.array(zod.string()),
  "scripts": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "dictionaryItems": zod.array(zod.string()),
  "id": zod.string().uuid(),
  "packagePath": zod.string()
}))
})


export const postPackageCreatedBody = zod.object({
  "name": zod.string(),
  "contentNodeId": zod.string().nullish(),
  "contentLoadChildNodes": zod.boolean(),
  "mediaIds": zod.array(zod.string().uuid()),
  "mediaLoadChildNodes": zod.boolean(),
  "documentTypes": zod.array(zod.string()),
  "mediaTypes": zod.array(zod.string()),
  "dataTypes": zod.array(zod.string()),
  "templates": zod.array(zod.string()),
  "partialViews": zod.array(zod.string()),
  "stylesheets": zod.array(zod.string()),
  "scripts": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "dictionaryItems": zod.array(zod.string()),
  "id": zod.string().uuid().nullish()
})


export const getPackageCreatedByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getPackageCreatedByIdResponse = zod.object({
  "name": zod.string(),
  "contentNodeId": zod.string().nullish(),
  "contentLoadChildNodes": zod.boolean(),
  "mediaIds": zod.array(zod.string().uuid()),
  "mediaLoadChildNodes": zod.boolean(),
  "documentTypes": zod.array(zod.string()),
  "mediaTypes": zod.array(zod.string()),
  "dataTypes": zod.array(zod.string()),
  "templates": zod.array(zod.string()),
  "partialViews": zod.array(zod.string()),
  "stylesheets": zod.array(zod.string()),
  "scripts": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "dictionaryItems": zod.array(zod.string()),
  "id": zod.string().uuid(),
  "packagePath": zod.string()
})


export const deletePackageCreatedByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putPackageCreatedByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putPackageCreatedByIdBody = zod.object({
  "name": zod.string(),
  "contentNodeId": zod.string().nullish(),
  "contentLoadChildNodes": zod.boolean(),
  "mediaIds": zod.array(zod.string().uuid()),
  "mediaLoadChildNodes": zod.boolean(),
  "documentTypes": zod.array(zod.string()),
  "mediaTypes": zod.array(zod.string()),
  "dataTypes": zod.array(zod.string()),
  "templates": zod.array(zod.string()),
  "partialViews": zod.array(zod.string()),
  "stylesheets": zod.array(zod.string()),
  "scripts": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "dictionaryItems": zod.array(zod.string()),
  "packagePath": zod.string()
})


export const getPackageCreatedByIdDownloadParams = zod.object({
  "id": zod.string().uuid()
})

export const getPackageCreatedByIdDownloadResponse = zod.instanceof(File)


export const getPackageMigrationStatusQuerySkipDefault = 0;export const getPackageMigrationStatusQueryTakeDefault = 100;

export const getPackageMigrationStatusQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getPackageMigrationStatusQueryTakeDefault)
})

export const getPackageMigrationStatusResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "packageName": zod.string(),
  "hasPendingMigrations": zod.boolean()
}))
})


export const getItemPartialViewQueryParams = zod.object({
  "path": zod.array(zod.string()).optional()
})

export const getItemPartialViewResponseItem = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
})
export const getItemPartialViewResponse = zod.array(getItemPartialViewResponseItem)


export const postPartialViewBody = zod.object({
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "content": zod.string()
})


export const getPartialViewByPathParams = zod.object({
  "path": zod.string()
})

export const getPartialViewByPathResponse = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "content": zod.string()
})


export const deletePartialViewByPathParams = zod.object({
  "path": zod.string()
})


export const putPartialViewByPathParams = zod.object({
  "path": zod.string()
})

export const putPartialViewByPathBody = zod.object({
  "content": zod.string()
})


export const putPartialViewByPathRenameParams = zod.object({
  "path": zod.string()
})

export const putPartialViewByPathRenameBody = zod.object({
  "name": zod.string()
})


export const postPartialViewFolderBody = zod.object({
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish()
})


export const getPartialViewFolderByPathParams = zod.object({
  "path": zod.string()
})

export const getPartialViewFolderByPathResponse = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish()
})


export const deletePartialViewFolderByPathParams = zod.object({
  "path": zod.string()
})


export const getPartialViewSnippetQuerySkipDefault = 0;export const getPartialViewSnippetQueryTakeDefault = 100;

export const getPartialViewSnippetQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getPartialViewSnippetQueryTakeDefault)
})

export const getPartialViewSnippetResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string(),
  "name": zod.string()
}))
})


export const getPartialViewSnippetByIdParams = zod.object({
  "id": zod.string()
})

export const getPartialViewSnippetByIdResponse = zod.object({
  "id": zod.string(),
  "name": zod.string(),
  "content": zod.string()
})


export const getTreePartialViewAncestorsQueryParams = zod.object({
  "descendantPath": zod.string().optional()
})

export const getTreePartialViewAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
})
export const getTreePartialViewAncestorsResponse = zod.array(getTreePartialViewAncestorsResponseItem)


export const getTreePartialViewChildrenQuerySkipDefault = 0;export const getTreePartialViewChildrenQueryTakeDefault = 100;

export const getTreePartialViewChildrenQueryParams = zod.object({
  "parentPath": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreePartialViewChildrenQueryTakeDefault)
})

export const getTreePartialViewChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
}))
})


export const getTreePartialViewRootQuerySkipDefault = 0;export const getTreePartialViewRootQueryTakeDefault = 100;

export const getTreePartialViewRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreePartialViewRootQueryTakeDefault)
})

export const getTreePartialViewRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
}))
})


export const getProfilingStatusResponse = zod.object({
  "enabled": zod.boolean()
})


export const putProfilingStatusBody = zod.object({
  "enabled": zod.boolean()
})


export const getPropertyTypeIsUsedQueryParams = zod.object({
  "contentTypeId": zod.string().uuid().optional(),
  "propertyAlias": zod.string().optional()
})

export const getPropertyTypeIsUsedResponse = zod.boolean()


export const getRedirectManagementQuerySkipDefault = 0;export const getRedirectManagementQueryTakeDefault = 100;

export const getRedirectManagementQueryParams = zod.object({
  "filter": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getRedirectManagementQueryTakeDefault)
})

export const getRedirectManagementResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "originalUrl": zod.string(),
  "destinationUrl": zod.string(),
  "created": zod.string().datetime({"local":true}),
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "culture": zod.string().nullish()
}))
})


export const getRedirectManagementByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getRedirectManagementByIdQuerySkipDefault = 0;export const getRedirectManagementByIdQueryTakeDefault = 100;

export const getRedirectManagementByIdQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getRedirectManagementByIdQueryTakeDefault)
})

export const getRedirectManagementByIdResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "originalUrl": zod.string(),
  "destinationUrl": zod.string(),
  "created": zod.string().datetime({"local":true}),
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "culture": zod.string().nullish()
}))
})


export const deleteRedirectManagementByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const getRedirectManagementStatusResponse = zod.object({
  "status": zod.enum(['Enabled', 'Disabled']),
  "userIsAdmin": zod.boolean()
})


export const postRedirectManagementStatusQueryParams = zod.object({
  "status": zod.enum(['Enabled', 'Disabled']).optional()
})


export const getItemRelationTypeQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemRelationTypeResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "isDeletable": zod.boolean()
})
export const getItemRelationTypeResponse = zod.array(getItemRelationTypeResponseItem)


export const getRelationTypeQuerySkipDefault = 0;export const getRelationTypeQueryTakeDefault = 100;

export const getRelationTypeQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getRelationTypeQueryTakeDefault)
})

export const getRelationTypeResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string().min(1),
  "isBidirectional": zod.boolean(),
  "isDependency": zod.boolean(),
  "id": zod.string().uuid(),
  "alias": zod.string().nullish(),
  "parentObject": zod.object({
  "name": zod.string().nullish(),
  "id": zod.string().uuid()
}).nullish(),
  "childObject": zod.object({
  "name": zod.string().nullish(),
  "id": zod.string().uuid()
}).nullish()
}))
})


export const getRelationTypeByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getRelationTypeByIdResponse = zod.object({
  "name": zod.string().min(1),
  "isBidirectional": zod.boolean(),
  "isDependency": zod.boolean(),
  "id": zod.string().uuid(),
  "alias": zod.string().nullish(),
  "parentObject": zod.object({
  "name": zod.string().nullish(),
  "id": zod.string().uuid()
}).nullish(),
  "childObject": zod.object({
  "name": zod.string().nullish(),
  "id": zod.string().uuid()
}).nullish()
})


export const getRelationByRelationTypeIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getRelationByRelationTypeIdQuerySkipDefault = 0;export const getRelationByRelationTypeIdQueryTakeDefault = 100;

export const getRelationByRelationTypeIdQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getRelationByRelationTypeIdQueryTakeDefault)
})

export const getRelationByRelationTypeIdResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "relationType": zod.object({
  "id": zod.string().uuid()
}),
  "parent": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullish()
}),
  "child": zod.object({
  "id": zod.string().uuid(),
  "name": zod.string().nullish()
}),
  "createDate": zod.string().datetime({"local":true}),
  "comment": zod.string().nullish()
}))
})


export const getItemScriptQueryParams = zod.object({
  "path": zod.array(zod.string()).optional()
})

export const getItemScriptResponseItem = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
})
export const getItemScriptResponse = zod.array(getItemScriptResponseItem)


export const postScriptBody = zod.object({
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "content": zod.string()
})


export const getScriptByPathParams = zod.object({
  "path": zod.string()
})

export const getScriptByPathResponse = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "content": zod.string()
})


export const deleteScriptByPathParams = zod.object({
  "path": zod.string()
})


export const putScriptByPathParams = zod.object({
  "path": zod.string()
})

export const putScriptByPathBody = zod.object({
  "content": zod.string()
})


export const putScriptByPathRenameParams = zod.object({
  "path": zod.string()
})

export const putScriptByPathRenameBody = zod.object({
  "name": zod.string()
})


export const postScriptFolderBody = zod.object({
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish()
})


export const getScriptFolderByPathParams = zod.object({
  "path": zod.string()
})

export const getScriptFolderByPathResponse = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish()
})


export const deleteScriptFolderByPathParams = zod.object({
  "path": zod.string()
})


export const getTreeScriptAncestorsQueryParams = zod.object({
  "descendantPath": zod.string().optional()
})

export const getTreeScriptAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
})
export const getTreeScriptAncestorsResponse = zod.array(getTreeScriptAncestorsResponseItem)


export const getTreeScriptChildrenQuerySkipDefault = 0;export const getTreeScriptChildrenQueryTakeDefault = 100;

export const getTreeScriptChildrenQueryParams = zod.object({
  "parentPath": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeScriptChildrenQueryTakeDefault)
})

export const getTreeScriptChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
}))
})


export const getTreeScriptRootQuerySkipDefault = 0;export const getTreeScriptRootQueryTakeDefault = 100;

export const getTreeScriptRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeScriptRootQueryTakeDefault)
})

export const getTreeScriptRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
}))
})


export const getSearcherQuerySkipDefault = 0;export const getSearcherQueryTakeDefault = 100;

export const getSearcherQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getSearcherQueryTakeDefault)
})

export const getSearcherResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string().min(1)
}))
})


export const getSearcherBySearcherNameQueryParams = zod.object({
  "searcherName": zod.string()
})

export const getSearcherBySearcherNameQueryQuerySkipDefault = 0;export const getSearcherBySearcherNameQueryQueryTakeDefault = 100;

export const getSearcherBySearcherNameQueryQueryParams = zod.object({
  "term": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getSearcherBySearcherNameQueryQueryTakeDefault)
})

export const getSearcherBySearcherNameQueryResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().min(1),
  "score": zod.number(),
  "fieldCount": zod.number(),
  "fields": zod.array(zod.object({
  "name": zod.string(),
  "values": zod.array(zod.string())
}))
}))
})


export const getSecurityConfigurationResponse = zod.object({
  "passwordConfiguration": zod.object({
  "minimumPasswordLength": zod.number(),
  "requireNonLetterOrDigit": zod.boolean(),
  "requireDigit": zod.boolean(),
  "requireLowercase": zod.boolean(),
  "requireUppercase": zod.boolean()
})
})


export const postSecurityForgotPasswordBody = zod.object({
  "email": zod.string().min(1)
})


export const postSecurityForgotPasswordResetBody = zod.object({
  "user": zod.object({
  "id": zod.string().uuid()
}),
  "resetCode": zod.string(),
  "password": zod.string().min(1)
})


export const postSecurityForgotPasswordVerifyBody = zod.object({
  "user": zod.object({
  "id": zod.string().uuid()
}),
  "resetCode": zod.string()
})

export const postSecurityForgotPasswordVerifyResponse = zod.object({
  "passwordConfiguration": zod.object({
  "minimumPasswordLength": zod.number(),
  "requireNonLetterOrDigit": zod.boolean(),
  "requireDigit": zod.boolean(),
  "requireLowercase": zod.boolean(),
  "requireUppercase": zod.boolean()
})
})


export const getSegmentQuerySkipDefault = 0;export const getSegmentQueryTakeDefault = 100;

export const getSegmentQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getSegmentQueryTakeDefault)
})

export const getSegmentResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string(),
  "alias": zod.string()
}))
})


export const getServerConfigurationResponse = zod.object({
  "allowPasswordReset": zod.boolean(),
  "versionCheckPeriod": zod.number(),
  "allowLocalLogin": zod.boolean()
})


export const getServerInformationResponse = zod.object({
  "version": zod.string(),
  "assemblyVersion": zod.string(),
  "baseUtcOffset": zod.string(),
  "runtimeMode": zod.enum(['BackofficeDevelopment', 'Development', 'Production'])
})


export const getServerStatusResponse = zod.object({
  "serverStatus": zod.enum(['Unknown', 'Boot', 'Install', 'Upgrade', 'Run', 'BootFailed'])
})


export const getServerTroubleshootingResponse = zod.object({
  "items": zod.array(zod.object({
  "name": zod.string(),
  "data": zod.string()
}))
})


export const getServerUpgradeCheckResponse = zod.object({
  "type": zod.string(),
  "comment": zod.string(),
  "url": zod.string()
})


export const getItemStaticFileQueryParams = zod.object({
  "path": zod.array(zod.string()).optional()
})

export const getItemStaticFileResponseItem = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
})
export const getItemStaticFileResponse = zod.array(getItemStaticFileResponseItem)


export const getTreeStaticFileAncestorsQueryParams = zod.object({
  "descendantPath": zod.string().optional()
})

export const getTreeStaticFileAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
})
export const getTreeStaticFileAncestorsResponse = zod.array(getTreeStaticFileAncestorsResponseItem)


export const getTreeStaticFileChildrenQuerySkipDefault = 0;export const getTreeStaticFileChildrenQueryTakeDefault = 100;

export const getTreeStaticFileChildrenQueryParams = zod.object({
  "parentPath": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeStaticFileChildrenQueryTakeDefault)
})

export const getTreeStaticFileChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
}))
})


export const getTreeStaticFileRootQuerySkipDefault = 0;export const getTreeStaticFileRootQueryTakeDefault = 100;

export const getTreeStaticFileRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeStaticFileRootQueryTakeDefault)
})

export const getTreeStaticFileRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
}))
})


export const getItemStylesheetQueryParams = zod.object({
  "path": zod.array(zod.string()).optional()
})

export const getItemStylesheetResponseItem = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
})
export const getItemStylesheetResponse = zod.array(getItemStylesheetResponseItem)


export const postStylesheetBody = zod.object({
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "content": zod.string()
})


export const getStylesheetByPathParams = zod.object({
  "path": zod.string()
})

export const getStylesheetByPathResponse = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "content": zod.string()
})


export const deleteStylesheetByPathParams = zod.object({
  "path": zod.string()
})


export const putStylesheetByPathParams = zod.object({
  "path": zod.string()
})

export const putStylesheetByPathBody = zod.object({
  "content": zod.string()
})


export const putStylesheetByPathRenameParams = zod.object({
  "path": zod.string()
})

export const putStylesheetByPathRenameBody = zod.object({
  "name": zod.string()
})


export const postStylesheetFolderBody = zod.object({
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish()
})


export const getStylesheetFolderByPathParams = zod.object({
  "path": zod.string()
})

export const getStylesheetFolderByPathResponse = zod.object({
  "path": zod.string(),
  "name": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish()
})


export const deleteStylesheetFolderByPathParams = zod.object({
  "path": zod.string()
})


export const getTreeStylesheetAncestorsQueryParams = zod.object({
  "descendantPath": zod.string().optional()
})

export const getTreeStylesheetAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
})
export const getTreeStylesheetAncestorsResponse = zod.array(getTreeStylesheetAncestorsResponseItem)


export const getTreeStylesheetChildrenQuerySkipDefault = 0;export const getTreeStylesheetChildrenQueryTakeDefault = 100;

export const getTreeStylesheetChildrenQueryParams = zod.object({
  "parentPath": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeStylesheetChildrenQueryTakeDefault)
})

export const getTreeStylesheetChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
}))
})


export const getTreeStylesheetRootQuerySkipDefault = 0;export const getTreeStylesheetRootQueryTakeDefault = 100;

export const getTreeStylesheetRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeStylesheetRootQueryTakeDefault)
})

export const getTreeStylesheetRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "name": zod.string(),
  "path": zod.string(),
  "parent": zod.object({
  "path": zod.string()
}).nullish(),
  "isFolder": zod.boolean()
}))
})


export const getTagQuerySkipDefault = 0;export const getTagQueryTakeDefault = 100;

export const getTagQueryParams = zod.object({
  "query": zod.string().optional(),
  "tagGroup": zod.string().optional(),
  "culture": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTagQueryTakeDefault)
})

export const getTagResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "text": zod.string().nullish(),
  "group": zod.string().nullish(),
  "nodeCount": zod.number()
}))
})


export const getTelemetryQuerySkipDefault = 0;export const getTelemetryQueryTakeDefault = 100;

export const getTelemetryQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTelemetryQueryTakeDefault)
})

export const getTelemetryResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "telemetryLevel": zod.enum(['Minimal', 'Basic', 'Detailed'])
}))
})


export const getTelemetryLevelResponse = zod.object({
  "telemetryLevel": zod.enum(['Minimal', 'Basic', 'Detailed'])
})


export const postTelemetryLevelBody = zod.object({
  "telemetryLevel": zod.enum(['Minimal', 'Basic', 'Detailed'])
})


export const getItemTemplateQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemTemplateResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "alias": zod.string()
})
export const getItemTemplateResponse = zod.array(getItemTemplateResponseItem)


export const getItemTemplateSearchQuerySkipDefault = 0;export const getItemTemplateSearchQueryTakeDefault = 100;

export const getItemTemplateSearchQueryParams = zod.object({
  "query": zod.string().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getItemTemplateSearchQueryTakeDefault)
})

export const getItemTemplateSearchResponse = zod.object({
  "items": zod.array(zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "alias": zod.string()
})),
  "total": zod.number()
})


export const postTemplateBody = zod.object({
  "name": zod.string().min(1),
  "alias": zod.string().min(1),
  "content": zod.string().nullish(),
  "id": zod.string().uuid().nullish()
})


export const getTemplateByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getTemplateByIdResponse = zod.object({
  "name": zod.string().min(1),
  "alias": zod.string().min(1),
  "content": zod.string().nullish(),
  "id": zod.string().uuid(),
  "masterTemplate": zod.object({
  "id": zod.string().uuid()
}).nullish()
})


export const deleteTemplateByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putTemplateByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putTemplateByIdBody = zod.object({
  "name": zod.string().min(1),
  "alias": zod.string().min(1),
  "content": zod.string().nullish()
})


export const getTemplateConfigurationResponse = zod.object({
  "disabled": zod.boolean()
})


export const postTemplateQueryExecuteBody = zod.object({
  "rootDocument": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentTypeAlias": zod.string().nullish(),
  "filters": zod.array(zod.object({
  "propertyAlias": zod.string().min(1),
  "constraintValue": zod.string().min(1),
  "operator": zod.enum(['Equals', 'NotEquals', 'Contains', 'NotContains', 'LessThan', 'LessThanEqualTo', 'GreaterThan', 'GreaterThanEqualTo'])
})).nullish(),
  "sort": zod.object({
  "propertyAlias": zod.string(),
  "direction": zod.string().nullish()
}).nullish(),
  "take": zod.number()
})

export const postTemplateQueryExecuteResponse = zod.object({
  "queryExpression": zod.string(),
  "sampleResults": zod.array(zod.object({
  "icon": zod.string(),
  "name": zod.string()
})),
  "resultCount": zod.number(),
  "executionTime": zod.number()
})


export const getTemplateQuerySettingsResponse = zod.object({
  "documentTypeAliases": zod.array(zod.string()),
  "properties": zod.array(zod.object({
  "alias": zod.string(),
  "type": zod.enum(['String', 'DateTime', 'Integer'])
})),
  "operators": zod.array(zod.object({
  "operator": zod.enum(['Equals', 'NotEquals', 'Contains', 'NotContains', 'LessThan', 'LessThanEqualTo', 'GreaterThan', 'GreaterThanEqualTo']),
  "applicableTypes": zod.array(zod.enum(['String', 'DateTime', 'Integer']))
}))
})


export const getTreeTemplateAncestorsQueryParams = zod.object({
  "descendantId": zod.string().uuid().optional()
})

export const getTreeTemplateAncestorsResponseItem = zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string()
})
export const getTreeTemplateAncestorsResponse = zod.array(getTreeTemplateAncestorsResponseItem)


export const getTreeTemplateChildrenQuerySkipDefault = 0;export const getTreeTemplateChildrenQueryTakeDefault = 100;

export const getTreeTemplateChildrenQueryParams = zod.object({
  "parentId": zod.string().uuid().optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeTemplateChildrenQueryTakeDefault)
})

export const getTreeTemplateChildrenResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string()
}))
})


export const getTreeTemplateRootQuerySkipDefault = 0;export const getTreeTemplateRootQueryTakeDefault = 100;

export const getTreeTemplateRootQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getTreeTemplateRootQueryTakeDefault)
})

export const getTreeTemplateRootResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "hasChildren": zod.boolean(),
  "id": zod.string().uuid(),
  "parent": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "name": zod.string()
}))
})


export const getUpgradeSettingsResponse = zod.object({
  "currentState": zod.string().min(1),
  "newState": zod.string().min(1),
  "newVersion": zod.string().min(1),
  "oldVersion": zod.string().min(1),
  "reportUrl": zod.string()
})


export const postUserDataBody = zod.object({
  "group": zod.string(),
  "identifier": zod.string(),
  "value": zod.string(),
  "key": zod.string().uuid().nullish()
})


export const getUserDataQuerySkipDefault = 0;export const getUserDataQueryTakeDefault = 100;

export const getUserDataQueryParams = zod.object({
  "groups": zod.array(zod.string()).optional(),
  "identifiers": zod.array(zod.string()).optional(),
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getUserDataQueryTakeDefault)
})

export const getUserDataResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "group": zod.string(),
  "identifier": zod.string(),
  "value": zod.string(),
  "key": zod.string().uuid()
}))
})


export const putUserDataBody = zod.object({
  "group": zod.string(),
  "identifier": zod.string(),
  "value": zod.string(),
  "key": zod.string().uuid()
})


export const getUserDataByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getUserDataByIdResponse = zod.object({
  "group": zod.string(),
  "identifier": zod.string(),
  "value": zod.string()
})


export const getFilterUserGroupQuerySkipDefault = 0;export const getFilterUserGroupQueryTakeDefault = 100;export const getFilterUserGroupQueryFilterDefault = "";

export const getFilterUserGroupQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getFilterUserGroupQueryTakeDefault),
  "filter": zod.string().optional()
})

export const getFilterUserGroupResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string(),
  "alias": zod.string(),
  "icon": zod.string().nullish(),
  "sections": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "hasAccessToAllLanguages": zod.boolean(),
  "documentStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentRootAccess": zod.boolean(),
  "mediaStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "mediaRootAccess": zod.boolean(),
  "fallbackPermissions": zod.array(zod.string()),
  "permissions": zod.array(zod.object({
  "$type": zod.enum(['DocumentPermissionPresentationModel']),
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "verbs": zod.array(zod.string())
}).or(zod.object({
  "$type": zod.enum(['UnknownTypePermissionPresentationModel']),
  "verbs": zod.array(zod.string()),
  "context": zod.string()
}))),
  "id": zod.string().uuid(),
  "isDeletable": zod.boolean(),
  "aliasCanBeChanged": zod.boolean()
}))
})


export const getItemUserGroupQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemUserGroupResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "icon": zod.string().nullish(),
  "alias": zod.string().nullish()
})
export const getItemUserGroupResponse = zod.array(getItemUserGroupResponseItem)


export const deleteUserGroupBody = zod.object({
  "userGroupIds": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const postUserGroupBody = zod.object({
  "name": zod.string(),
  "alias": zod.string(),
  "icon": zod.string().nullish(),
  "sections": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "hasAccessToAllLanguages": zod.boolean(),
  "documentStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentRootAccess": zod.boolean(),
  "mediaStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "mediaRootAccess": zod.boolean(),
  "fallbackPermissions": zod.array(zod.string()),
  "permissions": zod.array(zod.object({
  "$type": zod.enum(['DocumentPermissionPresentationModel']),
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "verbs": zod.array(zod.string())
}).or(zod.object({
  "$type": zod.enum(['UnknownTypePermissionPresentationModel']),
  "verbs": zod.array(zod.string()),
  "context": zod.string()
}))),
  "id": zod.string().uuid().nullish()
})


export const getUserGroupQuerySkipDefault = 0;export const getUserGroupQueryTakeDefault = 100;

export const getUserGroupQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getUserGroupQueryTakeDefault)
})

export const getUserGroupResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "name": zod.string(),
  "alias": zod.string(),
  "icon": zod.string().nullish(),
  "sections": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "hasAccessToAllLanguages": zod.boolean(),
  "documentStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentRootAccess": zod.boolean(),
  "mediaStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "mediaRootAccess": zod.boolean(),
  "fallbackPermissions": zod.array(zod.string()),
  "permissions": zod.array(zod.object({
  "$type": zod.enum(['DocumentPermissionPresentationModel']),
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "verbs": zod.array(zod.string())
}).or(zod.object({
  "$type": zod.enum(['UnknownTypePermissionPresentationModel']),
  "verbs": zod.array(zod.string()),
  "context": zod.string()
}))),
  "id": zod.string().uuid(),
  "isDeletable": zod.boolean(),
  "aliasCanBeChanged": zod.boolean()
}))
})


export const getUserGroupByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getUserGroupByIdResponse = zod.object({
  "name": zod.string(),
  "alias": zod.string(),
  "icon": zod.string().nullish(),
  "sections": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "hasAccessToAllLanguages": zod.boolean(),
  "documentStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentRootAccess": zod.boolean(),
  "mediaStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "mediaRootAccess": zod.boolean(),
  "fallbackPermissions": zod.array(zod.string()),
  "permissions": zod.array(zod.object({
  "$type": zod.enum(['DocumentPermissionPresentationModel']),
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "verbs": zod.array(zod.string())
}).or(zod.object({
  "$type": zod.enum(['UnknownTypePermissionPresentationModel']),
  "verbs": zod.array(zod.string()),
  "context": zod.string()
}))),
  "id": zod.string().uuid(),
  "isDeletable": zod.boolean(),
  "aliasCanBeChanged": zod.boolean()
})


export const deleteUserGroupByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putUserGroupByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putUserGroupByIdBody = zod.object({
  "name": zod.string(),
  "alias": zod.string(),
  "icon": zod.string().nullish(),
  "sections": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "hasAccessToAllLanguages": zod.boolean(),
  "documentStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "documentRootAccess": zod.boolean(),
  "mediaStartNode": zod.object({
  "id": zod.string().uuid()
}).nullish(),
  "mediaRootAccess": zod.boolean(),
  "fallbackPermissions": zod.array(zod.string()),
  "permissions": zod.array(zod.object({
  "$type": zod.enum(['DocumentPermissionPresentationModel']),
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "verbs": zod.array(zod.string())
}).or(zod.object({
  "$type": zod.enum(['UnknownTypePermissionPresentationModel']),
  "verbs": zod.array(zod.string()),
  "context": zod.string()
})))
})


export const deleteUserGroupByIdUsersParams = zod.object({
  "id": zod.string().uuid()
})

export const deleteUserGroupByIdUsersBodyItem = zod.object({
  "id": zod.string().uuid()
})
export const deleteUserGroupByIdUsersBody = zod.array(deleteUserGroupByIdUsersBodyItem)


export const postUserGroupByIdUsersParams = zod.object({
  "id": zod.string().uuid()
})

export const postUserGroupByIdUsersBodyItem = zod.object({
  "id": zod.string().uuid()
})
export const postUserGroupByIdUsersBody = zod.array(postUserGroupByIdUsersBodyItem)


export const getFilterUserQuerySkipDefault = 0;export const getFilterUserQueryTakeDefault = 100;export const getFilterUserQueryFilterDefault = "";

export const getFilterUserQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getFilterUserQueryTakeDefault),
  "orderBy": zod.enum(['UserName', 'Language', 'Name', 'Email', 'Id', 'CreateDate', 'UpdateDate', 'IsApproved', 'IsLockedOut', 'LastLoginDate']).optional(),
  "orderDirection": zod.enum(['Ascending', 'Descending']).optional(),
  "userGroupIds": zod.array(zod.string().uuid()).optional(),
  "userStates": zod.array(zod.enum(['Active', 'Disabled', 'LockedOut', 'Invited', 'Inactive', 'All'])).optional(),
  "filter": zod.string().optional()
})

export const getFilterUserResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "email": zod.string(),
  "userName": zod.string(),
  "name": zod.string(),
  "userGroupIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "id": zod.string().uuid(),
  "languageIsoCode": zod.string().nullish(),
  "documentStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasDocumentRootAccess": zod.boolean(),
  "mediaStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasMediaRootAccess": zod.boolean(),
  "avatarUrls": zod.array(zod.string()),
  "state": zod.enum(['Active', 'Disabled', 'LockedOut', 'Invited', 'Inactive', 'All']),
  "failedLoginAttempts": zod.number(),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true}),
  "lastLoginDate": zod.string().datetime({"local":true}).nullish(),
  "lastLockoutDate": zod.string().datetime({"local":true}).nullish(),
  "lastPasswordChangeDate": zod.string().datetime({"local":true}).nullish(),
  "isAdmin": zod.boolean(),
  "kind": zod.enum(['Default', 'Api'])
}))
})


export const getItemUserQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemUserResponseItem = zod.object({
  "id": zod.string().uuid(),
  "name": zod.string(),
  "avatarUrls": zod.array(zod.string()),
  "kind": zod.enum(['Default', 'Api'])
})
export const getItemUserResponse = zod.array(getItemUserResponseItem)


export const postUserBody = zod.object({
  "email": zod.string(),
  "userName": zod.string(),
  "name": zod.string(),
  "userGroupIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "id": zod.string().uuid().nullish(),
  "kind": zod.enum(['Default', 'Api'])
})


export const deleteUserBody = zod.object({
  "userIds": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const getUserQuerySkipDefault = 0;export const getUserQueryTakeDefault = 100;

export const getUserQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getUserQueryTakeDefault)
})

export const getUserResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "email": zod.string(),
  "userName": zod.string(),
  "name": zod.string(),
  "userGroupIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "id": zod.string().uuid(),
  "languageIsoCode": zod.string().nullish(),
  "documentStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasDocumentRootAccess": zod.boolean(),
  "mediaStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasMediaRootAccess": zod.boolean(),
  "avatarUrls": zod.array(zod.string()),
  "state": zod.enum(['Active', 'Disabled', 'LockedOut', 'Invited', 'Inactive', 'All']),
  "failedLoginAttempts": zod.number(),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true}),
  "lastLoginDate": zod.string().datetime({"local":true}).nullish(),
  "lastLockoutDate": zod.string().datetime({"local":true}).nullish(),
  "lastPasswordChangeDate": zod.string().datetime({"local":true}).nullish(),
  "isAdmin": zod.boolean(),
  "kind": zod.enum(['Default', 'Api'])
}))
})


export const getUserByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getUserByIdResponse = zod.object({
  "email": zod.string(),
  "userName": zod.string(),
  "name": zod.string(),
  "userGroupIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "id": zod.string().uuid(),
  "languageIsoCode": zod.string().nullish(),
  "documentStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasDocumentRootAccess": zod.boolean(),
  "mediaStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasMediaRootAccess": zod.boolean(),
  "avatarUrls": zod.array(zod.string()),
  "state": zod.enum(['Active', 'Disabled', 'LockedOut', 'Invited', 'Inactive', 'All']),
  "failedLoginAttempts": zod.number(),
  "createDate": zod.string().datetime({"local":true}),
  "updateDate": zod.string().datetime({"local":true}),
  "lastLoginDate": zod.string().datetime({"local":true}).nullish(),
  "lastLockoutDate": zod.string().datetime({"local":true}).nullish(),
  "lastPasswordChangeDate": zod.string().datetime({"local":true}).nullish(),
  "isAdmin": zod.boolean(),
  "kind": zod.enum(['Default', 'Api'])
})


export const deleteUserByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putUserByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putUserByIdBody = zod.object({
  "email": zod.string(),
  "userName": zod.string(),
  "name": zod.string(),
  "userGroupIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "languageIsoCode": zod.string(),
  "documentStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasDocumentRootAccess": zod.boolean(),
  "mediaStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasMediaRootAccess": zod.boolean()
})


export const getUserById2faParams = zod.object({
  "id": zod.string().uuid()
})

export const getUserById2faResponseItem = zod.object({
  "providerName": zod.string(),
  "isEnabledOnUser": zod.boolean()
})
export const getUserById2faResponse = zod.array(getUserById2faResponseItem)


export const deleteUserById2faByProviderNameParams = zod.object({
  "id": zod.string().uuid(),
  "providerName": zod.string()
})


export const getUserByIdCalculateStartNodesParams = zod.object({
  "id": zod.string().uuid()
})

export const getUserByIdCalculateStartNodesResponse = zod.object({
  "id": zod.string().uuid(),
  "documentStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasDocumentRootAccess": zod.boolean(),
  "mediaStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasMediaRootAccess": zod.boolean()
})


export const postUserByIdChangePasswordParams = zod.object({
  "id": zod.string().uuid()
})

export const postUserByIdChangePasswordBody = zod.object({
  "newPassword": zod.string()
})


export const postUserByIdClientCredentialsParams = zod.object({
  "id": zod.string().uuid()
})

export const postUserByIdClientCredentialsBody = zod.object({
  "clientId": zod.string(),
  "clientSecret": zod.string()
})


export const getUserByIdClientCredentialsParams = zod.object({
  "id": zod.string().uuid()
})

export const getUserByIdClientCredentialsResponseItem = zod.string()
export const getUserByIdClientCredentialsResponse = zod.array(getUserByIdClientCredentialsResponseItem)


export const deleteUserByIdClientCredentialsByClientIdParams = zod.object({
  "id": zod.string().uuid(),
  "clientId": zod.string()
})


export const postUserByIdResetPasswordParams = zod.object({
  "id": zod.string().uuid()
})

export const postUserByIdResetPasswordResponse = zod.object({
  "resetPassword": zod.string().nullish()
})


export const deleteUserAvatarByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const postUserAvatarByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const postUserAvatarByIdBody = zod.object({
  "file": zod.object({
  "id": zod.string().uuid()
})
})


export const getUserConfigurationResponse = zod.object({
  "canInviteUsers": zod.boolean(),
  "usernameIsEmail": zod.boolean(),
  "passwordConfiguration": zod.object({
  "minimumPasswordLength": zod.number(),
  "requireNonLetterOrDigit": zod.boolean(),
  "requireDigit": zod.boolean(),
  "requireLowercase": zod.boolean(),
  "requireUppercase": zod.boolean()
}),
  "allowChangePassword": zod.boolean(),
  "allowTwoFactor": zod.boolean()
})


export const getUserCurrentResponse = zod.object({
  "email": zod.string(),
  "userName": zod.string(),
  "name": zod.string(),
  "userGroupIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "id": zod.string().uuid(),
  "languageIsoCode": zod.string().nullable(),
  "documentStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasDocumentRootAccess": zod.boolean(),
  "mediaStartNodeIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "hasMediaRootAccess": zod.boolean(),
  "avatarUrls": zod.array(zod.string()),
  "languages": zod.array(zod.string()),
  "hasAccessToAllLanguages": zod.boolean(),
  "hasAccessToSensitiveData": zod.boolean(),
  "fallbackPermissions": zod.array(zod.string()),
  "permissions": zod.array(zod.object({
  "$type": zod.enum(['DocumentPermissionPresentationModel']),
  "document": zod.object({
  "id": zod.string().uuid()
}),
  "verbs": zod.array(zod.string())
}).or(zod.object({
  "$type": zod.enum(['UnknownTypePermissionPresentationModel']),
  "verbs": zod.array(zod.string()),
  "context": zod.string()
}))),
  "allowedSections": zod.array(zod.string()),
  "isAdmin": zod.boolean()
})


export const getUserCurrent2faResponseItem = zod.object({
  "providerName": zod.string(),
  "isEnabledOnUser": zod.boolean()
})
export const getUserCurrent2faResponse = zod.array(getUserCurrent2faResponseItem)


export const deleteUserCurrent2faByProviderNameParams = zod.object({
  "providerName": zod.string()
})

export const deleteUserCurrent2faByProviderNameQueryParams = zod.object({
  "code": zod.string().optional()
})


export const postUserCurrent2faByProviderNameParams = zod.object({
  "providerName": zod.string()
})

export const postUserCurrent2faByProviderNameBody = zod.object({
  "code": zod.string(),
  "secret": zod.string()
})

export const postUserCurrent2faByProviderNameResponse = zod.object({

})


export const getUserCurrent2faByProviderNameParams = zod.object({
  "providerName": zod.string()
})

export const getUserCurrent2faByProviderNameResponse = zod.object({

})


export const postUserCurrentAvatarBody = zod.object({
  "file": zod.object({
  "id": zod.string().uuid()
})
})


export const postUserCurrentChangePasswordBody = zod.object({
  "newPassword": zod.string(),
  "oldPassword": zod.string().nullish()
})


export const getUserCurrentConfigurationResponse = zod.object({
  "keepUserLoggedIn": zod.boolean(),
  "usernameIsEmail": zod.boolean(),
  "passwordConfiguration": zod.object({
  "minimumPasswordLength": zod.number(),
  "requireNonLetterOrDigit": zod.boolean(),
  "requireDigit": zod.boolean(),
  "requireLowercase": zod.boolean(),
  "requireUppercase": zod.boolean()
}),
  "allowChangePassword": zod.boolean(),
  "allowTwoFactor": zod.boolean()
})


export const getUserCurrentLoginProvidersResponseItem = zod.object({
  "providerSchemeName": zod.string(),
  "providerKey": zod.string().nullish(),
  "isLinkedOnUser": zod.boolean(),
  "hasManualLinkingEnabled": zod.boolean()
})
export const getUserCurrentLoginProvidersResponse = zod.array(getUserCurrentLoginProvidersResponseItem)


export const getUserCurrentPermissionsQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getUserCurrentPermissionsResponse = zod.object({
  "permissions": zod.array(zod.object({
  "nodeKey": zod.string().uuid(),
  "permissions": zod.array(zod.string())
}))
})


export const getUserCurrentPermissionsDocumentQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getUserCurrentPermissionsDocumentResponseItem = zod.object({
  "permissions": zod.array(zod.object({
  "nodeKey": zod.string().uuid(),
  "permissions": zod.array(zod.string())
}))
})
export const getUserCurrentPermissionsDocumentResponse = zod.array(getUserCurrentPermissionsDocumentResponseItem)


export const getUserCurrentPermissionsMediaQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getUserCurrentPermissionsMediaResponse = zod.object({
  "permissions": zod.array(zod.object({
  "nodeKey": zod.string().uuid(),
  "permissions": zod.array(zod.string())
}))
})


export const postUserDisableBody = zod.object({
  "userIds": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const postUserEnableBody = zod.object({
  "userIds": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const postUserInviteBody = zod.object({
  "email": zod.string(),
  "userName": zod.string(),
  "name": zod.string(),
  "userGroupIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "id": zod.string().uuid().nullish(),
  "message": zod.string().nullish()
})


export const postUserInviteCreatePasswordBody = zod.object({
  "user": zod.object({
  "id": zod.string().uuid()
}),
  "token": zod.string().min(1),
  "password": zod.string()
})


export const postUserInviteResendBody = zod.object({
  "user": zod.object({
  "id": zod.string().uuid()
}),
  "message": zod.string().nullish()
})


export const postUserInviteVerifyBody = zod.object({
  "user": zod.object({
  "id": zod.string().uuid()
}),
  "token": zod.string().min(1)
})

export const postUserInviteVerifyResponse = zod.object({
  "passwordConfiguration": zod.object({
  "minimumPasswordLength": zod.number(),
  "requireNonLetterOrDigit": zod.boolean(),
  "requireDigit": zod.boolean(),
  "requireLowercase": zod.boolean(),
  "requireUppercase": zod.boolean()
})
})


export const postUserSetUserGroupsBody = zod.object({
  "userIds": zod.array(zod.object({
  "id": zod.string().uuid()
})),
  "userGroupIds": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const postUserUnlockBody = zod.object({
  "userIds": zod.array(zod.object({
  "id": zod.string().uuid()
}))
})


export const getItemWebhookQueryParams = zod.object({
  "id": zod.array(zod.string().uuid()).optional()
})

export const getItemWebhookResponseItem = zod.object({
  "enabled": zod.boolean(),
  "name": zod.string(),
  "events": zod.string(),
  "url": zod.string(),
  "types": zod.string()
})
export const getItemWebhookResponse = zod.array(getItemWebhookResponseItem)


export const getWebhookQuerySkipDefault = 0;export const getWebhookQueryTakeDefault = 100;

export const getWebhookQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getWebhookQueryTakeDefault)
})

export const getWebhookResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "enabled": zod.boolean(),
  "name": zod.string().nullish(),
  "description": zod.string().nullish(),
  "url": zod.string().min(1),
  "contentTypeKeys": zod.array(zod.string().uuid()),
  "headers": zod.record(zod.string(), zod.string()),
  "id": zod.string().uuid(),
  "events": zod.array(zod.object({
  "eventName": zod.string(),
  "eventType": zod.string(),
  "alias": zod.string()
}))
}))
})


export const postWebhookBody = zod.object({
  "enabled": zod.boolean(),
  "name": zod.string().nullish(),
  "description": zod.string().nullish(),
  "url": zod.string().min(1),
  "contentTypeKeys": zod.array(zod.string().uuid()),
  "headers": zod.record(zod.string(), zod.string()),
  "id": zod.string().uuid().nullish(),
  "events": zod.array(zod.string())
})


export const getWebhookByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const getWebhookByIdResponse = zod.object({
  "enabled": zod.boolean(),
  "name": zod.string().nullish(),
  "description": zod.string().nullish(),
  "url": zod.string().min(1),
  "contentTypeKeys": zod.array(zod.string().uuid()),
  "headers": zod.record(zod.string(), zod.string()),
  "id": zod.string().uuid(),
  "events": zod.array(zod.object({
  "eventName": zod.string(),
  "eventType": zod.string(),
  "alias": zod.string()
}))
})


export const deleteWebhookByIdParams = zod.object({
  "id": zod.string().uuid()
})


export const putWebhookByIdParams = zod.object({
  "id": zod.string().uuid()
})

export const putWebhookByIdBody = zod.object({
  "enabled": zod.boolean(),
  "name": zod.string().nullish(),
  "description": zod.string().nullish(),
  "url": zod.string().min(1),
  "contentTypeKeys": zod.array(zod.string().uuid()),
  "headers": zod.record(zod.string(), zod.string()),
  "events": zod.array(zod.string())
})


export const getWebhookByIdLogsParams = zod.object({
  "id": zod.string().uuid()
})

export const getWebhookByIdLogsQuerySkipDefault = 0;export const getWebhookByIdLogsQueryTakeDefault = 100;

export const getWebhookByIdLogsQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getWebhookByIdLogsQueryTakeDefault)
})

export const getWebhookByIdLogsResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "key": zod.string().uuid(),
  "webhookKey": zod.string().uuid(),
  "statusCode": zod.string(),
  "isSuccessStatusCode": zod.boolean(),
  "date": zod.string().datetime({"local":true}),
  "eventAlias": zod.string(),
  "url": zod.string(),
  "retryCount": zod.number(),
  "requestHeaders": zod.string(),
  "requestBody": zod.string(),
  "responseHeaders": zod.string(),
  "responseBody": zod.string(),
  "exceptionOccured": zod.boolean()
}))
})


export const getWebhookEventsQuerySkipDefault = 0;export const getWebhookEventsQueryTakeDefault = 100;

export const getWebhookEventsQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getWebhookEventsQueryTakeDefault)
})

export const getWebhookEventsResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "eventName": zod.string(),
  "eventType": zod.string(),
  "alias": zod.string()
}))
})


export const getWebhookLogsQuerySkipDefault = 0;export const getWebhookLogsQueryTakeDefault = 100;

export const getWebhookLogsQueryParams = zod.object({
  "skip": zod.coerce.number().optional(),
  "take": zod.coerce.number().default(getWebhookLogsQueryTakeDefault)
})

export const getWebhookLogsResponse = zod.object({
  "total": zod.number(),
  "items": zod.array(zod.object({
  "key": zod.string().uuid(),
  "webhookKey": zod.string().uuid(),
  "statusCode": zod.string(),
  "isSuccessStatusCode": zod.boolean(),
  "date": zod.string().datetime({"local":true}),
  "eventAlias": zod.string(),
  "url": zod.string(),
  "retryCount": zod.number(),
  "requestHeaders": zod.string(),
  "requestBody": zod.string(),
  "responseHeaders": zod.string(),
  "responseBody": zod.string(),
  "exceptionOccured": zod.boolean()
}))
})


