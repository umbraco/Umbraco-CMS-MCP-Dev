// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`document-reference-tests get-document-are-referenced should check if documents are referenced 1`] = `
{
  "content": [
    {
      "text": "{"total":0,"items":[]}",
      "type": "text",
    },
  ],
}
`;

exports[`document-reference-tests get-document-are-referenced should handle empty reference check 1`] = `
{
  "content": [
    {
      "text": "Error using get-document-are-referenced:
{
  "message": "Request failed with status code 500",
  "response": {
    "type": "Error",
    "title": "Incorrect syntax near ')'.",
    "status": 500,
    "detail": "   at Microsoft.Data.SqlClient.TdsParser.ThrowExceptionAndWarning(TdsParserStateObject stateObj, SqlCommand command, Boolean callerHasConnectionLock, Boolean asyncClose)\\n   at Microsoft.Data.SqlClient.TdsParser.TryRun(RunBehavior runBehavior, SqlCommand cmdHandler, SqlDataReader dataStream, BulkCopySimpleResultSet bulkCopyHandler, TdsParserStateObject stateObj, Boolean& dataReady)\\n   at Microsoft.Data.SqlClient.SqlDataReader.TryConsumeMetaData()\\n   at Microsoft.Data.SqlClient.SqlCommand.FinishExecuteReader(SqlDataReader ds, RunBehavior runBehavior, String resetOptionsString, Boolean isInternal, Boolean forDescribeParameterEncryption, Boolean shouldCacheForAlwaysEncrypted)\\n   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReaderTds(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, Boolean isAsync, Int32 timeout, Task& task, Boolean asyncWrite, Boolean inRetry, SqlDataReader ds, Boolean describeParameterEncryptionRequest)\\n   at Microsoft.Data.SqlClient.SqlCommand.RunExecuteReader(CommandBehavior cmdBehavior, RunBehavior runBehavior, Boolean returnStream, TaskCompletionSource\`1 completion, Int32 timeout, Task& task, Boolean& usedCache, Boolean asyncWrite, Boolean inRetry, String method)\\n   at Microsoft.Data.SqlClient.SqlCommand.ExecuteScalar()\\n   at Umbraco.Cms.Infrastructure.Persistence.FaultHandling.RetryPolicy.ExecuteAction[TResult](Func\`1 func)\\n   at NPoco.Database.ExecuteScalarHelper(DbCommand cmd)\\n   at NPoco.Database.ExecuteScalar[T](String sql, CommandType commandType, Object[] args)\\n   at Umbraco.Cms.Infrastructure.Persistence.UmbracoDatabase.ExecuteScalar[T](String sql, CommandType commandType, Object[] args)\\n   at Umbraco.Cms.Infrastructure.Persistence.Repositories.Implement.TrackedReferencesRepository.GetPagedNodeKeysWithDependantReferencesAsync(ISet\`1 keys, Guid nodeObjectTypeId, Int64 skip, Int64 take)\\n   at Umbraco.Cms.Core.Services.TrackedReferencesService.GetPagedKeysWithDependentReferencesAsync(ISet\`1 keys, Guid objectTypeId, Int64 skip, Int64 take)\\n   at Umbraco.Cms.Api.Management.Controllers.Document.References.AreReferencedDocumentController.GetPagedReferencedItems(CancellationToken cancellationToken, HashSet\`1 ids, Int32 skip, Int32 take)\\n   at lambda_method89332(Closure, Object)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ActionMethodExecutor.AwaitableObjectResultExecutor.Execute(ActionContext actionContext, IActionResultTypeMapper mapper, ObjectMethodExecutor executor, Object controller, Object[] arguments)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeActionMethodAsync>g__Awaited|12_0(ControllerActionInvoker invoker, ValueTask\`1 actionResultValueTask)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.<InvokeNextActionFilterAsync>g__Awaited|10_0(ControllerActionInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Rethrow(ActionExecutedContextSealed context)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ControllerActionInvoker.InvokeInnerFilterAsync()\\n--- End of stack trace from previous location ---\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeNextResourceFilter>g__Awaited|25_0(ResourceInvoker invoker, Task lastTask, State next, Scope scope, Object state, Boolean isCompleted)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Rethrow(ResourceExecutedContextSealed context)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.Next(State& next, Scope& scope, Object& state, Boolean& isCompleted)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.InvokeFilterPipelineAsync()\\n--- End of stack trace from previous location ---\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\\n   at Microsoft.AspNetCore.Mvc.Infrastructure.ResourceInvoker.<InvokeAsync>g__Awaited|17_0(ResourceInvoker invoker, Task task, IDisposable scope)\\n   at Umbraco.Cms.Web.Common.Middleware.BasicAuthenticationMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)\\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()\\n--- End of stack trace from previous location ---\\n   at Umbraco.Cms.Api.Management.Middleware.BackOfficeExternalLoginProviderErrorMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)\\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()\\n--- End of stack trace from previous location ---\\n   at Swashbuckle.AspNetCore.SwaggerUI.SwaggerUIMiddleware.Invoke(HttpContext httpContext)\\n   at Swashbuckle.AspNetCore.Swagger.SwaggerMiddleware.Invoke(HttpContext httpContext, ISwaggerProvider swaggerProvider)\\n   at Microsoft.AspNetCore.Session.SessionMiddleware.Invoke(HttpContext context)\\n   at Microsoft.AspNetCore.Session.SessionMiddleware.Invoke(HttpContext context)\\n   at Microsoft.AspNetCore.Localization.RequestLocalizationMiddleware.Invoke(HttpContext context)\\n   at Microsoft.AspNetCore.Authorization.AuthorizationMiddleware.Invoke(HttpContext context)\\n   at Microsoft.AspNetCore.Authentication.AuthenticationMiddleware.Invoke(HttpContext context)\\n   at StackExchange.Profiling.MiniProfilerMiddleware.Invoke(HttpContext context) in C:\\\\projects\\\\dotnet\\\\src\\\\MiniProfiler.AspNetCore\\\\MiniProfilerMiddleware.cs:line 112\\n   at Umbraco.Cms.Web.Common.Middleware.UmbracoRequestMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)\\n   at Umbraco.Cms.Web.Common.Middleware.UmbracoRequestMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)\\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()\\n--- End of stack trace from previous location ---\\n   at Umbraco.Cms.Web.Common.Middleware.PreviewAuthenticationMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)\\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()\\n--- End of stack trace from previous location ---\\n   at Umbraco.Cms.Web.Common.Middleware.UmbracoRequestLoggingMiddleware.InvokeAsync(HttpContext context, RequestDelegate next)\\n   at Microsoft.AspNetCore.Builder.UseMiddlewareExtensions.InterfaceMiddlewareBinder.<>c__DisplayClass2_0.<<CreateMiddleware>b__0>d.MoveNext()\\n--- End of stack trace from previous location ---\\n   at Microsoft.AspNetCore.Diagnostics.ExceptionHandlerMiddlewareImpl.<Invoke>g__Awaited|10_0(ExceptionHandlerMiddlewareImpl middleware, HttpContext context, Task task)",
    "instance": "SqlException"
  }
}",
      "type": "text",
    },
  ],
}
`;

exports[`document-reference-tests get-document-are-referenced should handle single document reference check 1`] = `
{
  "content": [
    {
      "text": "{"total":0,"items":[]}",
      "type": "text",
    },
  ],
}
`;

exports[`document-reference-tests get-document-by-id-referenced-by should get documents that reference a document by ID 1`] = `
{
  "content": [
    {
      "text": "{"total":0,"items":[]}",
      "type": "text",
    },
  ],
}
`;

exports[`document-reference-tests get-document-by-id-referenced-by should get references with pagination 1`] = `
{
  "content": [
    {
      "text": "{"total":0,"items":[]}",
      "type": "text",
    },
  ],
}
`;

exports[`document-reference-tests get-document-by-id-referenced-by should handle non-existent document 1`] = `
{
  "content": [
    {
      "text": "{"total":0,"items":[]}",
      "type": "text",
    },
  ],
}
`;

exports[`document-reference-tests get-document-by-id-referenced-descendants should get descendants that are referenced 1`] = `
{
  "content": [
    {
      "text": "{"total":0,"items":[]}",
      "type": "text",
    },
  ],
}
`;

exports[`document-reference-tests get-document-by-id-referenced-descendants should get referenced descendants with pagination 1`] = `
{
  "content": [
    {
      "text": "{"total":0,"items":[]}",
      "type": "text",
    },
  ],
}
`;

exports[`document-reference-tests get-document-by-id-referenced-descendants should handle non-existent document 1`] = `
{
  "content": [
    {
      "text": "{"total":0,"items":[]}",
      "type": "text",
    },
  ],
}
`;
